--AQlib loder
load(Base64Decode("LS1bWw0KCUNoYW5nZWxvZw0KCQkJMS4wOiBSZWxlYXNlZCBTY3JpcHQNCg0KCQkJMS4xDQoJCQk/CUFkZGVkIEZhcm0NCgkJCQlBZGRlZCBERkcgYW5kIFpob255YXMNCgkJCQlBZGRlZCBhdXRvIGRvd25sb2FkaW5nIHNjcmlwdCAoTm90IExpYnMpDQoJCQkJQWRkZWQgYW5vdGhlciBvcHRpb24gaW4gQ29tYm8gdG8gdXNlIFIgaWYgdGhlIFIgc3R1bnMNCgkJCTEuMg0KCQkJCT9BZGRlZCBBdXRvIEtpbGwgd2hlbiBLaWxsYWJsZSAoVG9nZ2xlKQ0KCQkJCUFkZGVkIEF1dG8gUSB3aGVuIFEgd2lsbCBTdHVuIChJbnNpZGUgSGFyYXNzIG1lbnUsIGJ1dCB3aWxsIHN0aWxsIENhc3QgZXZlbiB3aGVuIEhhcmFzcyBpcyBPZmYpDQoJCQkJQWRkZWQgSWduaXRlDQoJCQkJQWRkZWQgRSBjYXN0IHVudGlsIFN0dW4gaXMgVVANCgkJCQlGaXhlZCBhIGJ1ZyB3aXRoIEF1dG9Eb3dubG9hZGluZw0KCQkJMS4zDQoJCQkJQWRkZWQgYXV0by1kb3dubG9hZGluZyBsaWJyYXJpZXMNCgkJCQlSZXdyb3RlIGNvbWJvIChDb21ibyB3aGVyZSB5b3UgdXNlIFIgb25seSBpZiBpdCBzdHVucykNCgkJCQlBZGRlZCBhdXRvIEUgaWYgYmVpbmcgYXR0YWNrZWQNCgkJCQlBZGRlZCBIYXJhc3Mgb3B0aW9uIHRvIFEgPiBXIGlmIFcgd2lsbCBzdHVuIChzbyBAIDMgc3RhY2tzKQ0KCQkJMS40DQoJCQkJRml4ZWQgYm9sLmJvb3N0IGxpbmsNCgkJCTEuNQ0KCQkJCURpc2FibGVkIHVzYWdlIG9mIEUgd2hlbiBoZXJvIGlzIHJlY2FsbGluZw0KCQkJCURpc2FibGVkIEJvTCB0cmFja2VyIGZvciBmYXN0ZXIgcnVudGltZQ0KCQkJMS42DQoJCQkJRml4ZWQgTWFuYU1hbmdlcg0KCQkJCUFkZGVkIG5vdCB0byB1bHQgb24gY2VydGFpbiB0YXJnZXRzDQoJCQkJRml4ZWQgSWduaXRlDQoJCQkJCUFkZGVkICJVc2UgSWduaXRlIE9uIg0KCQkJCUFkZGVkIGJhcnJpZXIgYW5kIGhlYWwNCgkJCQlBZGRlZCBBdXRvIFVsdCAoaWYgdWx0IHdpbGwgaGl0IHggdGFyZ2V0cykNCgkJCQlCZXR0ZXIgQXV0b0tpbGwgKEF1dG9LaWxsIGFuZCBLaWxsU3RlYWwgYXJlIGJhc2ljYWxseSB0aGUgc2FtZSwgc28gdGhleSBhcmUgbm93IHRoZSBzYW1lIG1lbnUpDQoJCQkJQWRkZWQgREZHIHN1cHBvcnQNCgkJCQlOb3cgRHJhd3MgS2lsbGFibGUgKHdpdGggd2hpY2ggc3BlbGxzKSBvbiBBTEwgZW5lbWllcw0KCQkJMS43DQoJCQkJQWRkZWQgbW9yZSBDb21ibyBXYXlzDQoJCQkJCVFXUg0KCQkJCQlXUVINCgkJCQkJUlFXDQoJCQkJCVJXUQ0KCQkJCUFkZGVkIFpob255YXMgc3VwcG9ydCBmb3INCgkJCQkJS2FydGh1cyBVbHQNCgkJCQkJWmVkIFVsdCBpZiB0aGUgbWFyayB3aWxsIGtpbGwgeW91DQoJCQkJCVdpbGwgYWRkIG1vcmUgaWYgcmVxdWVzdGVkDQoJCQkJSW1wcm92ZWQgRHJhd2luZyBLaWxsYWJsZSB3aXRoIHdoaWNoIHNwZWxscyB0ZXh0DQoJCQkJTWFkZSB0aGUgQXV0b1VsdCBhIGxpdHRsZSBiaXQgc21vb3RoZXIvZmFzdGVyDQoJCQkJQ2xlYW5lZCB1cCBDb2RlDQoJCQkxLjgNCgkJCQlMaXR0bGUgVHdlYWtzIHRvIGltcHJvdmUgcGVyZm9ybWFuY2UNCgkJCQlGZXcgYnVnIGZpeGVzIC8gbWlzdHlwZXMNCgkJCQlIb3BlZnVsbHkgZml4ZWQgcmFuZG9tIGJ1Z3NwbGF0cw0KCQkJMS44NQ0KCQkJCURpc2FibGVkIEF1dG9MZXZlbGluZw0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCgkJCTIuMA0KCQkJCUFkZGVkIElnbml0ZSBpbiBBdXRvS2lsbA0KCQkJCUFkZGVkIElnbml0ZSBpbiBEcmF3IEtpbGxBYmxlDQoJCQkJQWRkZWQgRmxhc2ggaW4gQXV0b1INCgkJCQkJQWRqdXN0YWJsZSBzZXR0aW5nczoNCgkJCQkJCUVuZW1pZXMgbmVhcmJ5DQoJCQkJCQlSYW5nZSBiZXR3ZWVuIHlvdSBhbmQgZW5lbWllcw0KCQkJCQkJQWxsaWVzIG5lYXJieQ0KCQkJCQkJUmFuZ2UgYmV0d2VlbiB5b3UgYW5kIGFsbGllcw0KCQkJCUFkZGVkIEdhcGNsb3Nlci9JbnRlcnJ1cHRlcg0KCQkJCQlXaWxsIGNhc3QgUS9XIGlmIGl0J2xsIHN0dW4NCgkJCQlObyBsb25nZXJzIGZhcm1zIHdoaWxlIHJlY2FsbGluZw0KCQkJCVRoZXJlIGlzIG5vdyBhIHBvc3NpYmlsaXR5IHRvIGNhc3QgRVcgaW4gZm91bnRhaW4gdG8gc3RhY2sgU3R1bg0KCQkJCUp1bmdsZSBTdGVhbA0KCQkJCQlUaGVyZSBpcyBubyBwcmVkaWN0aW9uIGFkZGVkIGludG8gdGhpcywgc28gaXQnbGwganVzdCB1c2UgYWJpbGl0ZXMgd2hlbiB0aGUgZGFtYWdlIGlzIGhpZ2hlciB0aGFuIHRoZSBoZWFsdGggb2YgdGhlIGp1bmdsZSBjcmVlcC4NCgkJCQkJT25seSB3b3JrcyB3aXRoIGJpZyBtaW5pb25zDQoJCQkJCUJsdWUmUmVkOiBDYXN0IFENCgkJCQkJRHJhZ29uJkJhcm9uOiBDYXN0IFEgb3IgQ2FzdCBRL1IgLSBOb3QgYWRqdXN0YWJsZSwgc28gYmUgY2FyZWZ1bA0KCQkJMi4wNQ0KCQkJCUZpeGVkIGRhbW4gaWduaXRlIG1pc3R5cGUNCgkJCTIuMDYNCgkJCQlUZW1wIGZpeCBmb3IgU3hPcmJ3YWxrDQoJCQkyLjEwDQoJCQkJRml4ZWQgc3BhbSBidWcgd2l0aCAiUW1nIg0KCQkJCUZpeGVkIEp1bmdsZSBOYW1lcyAoSnVuZ2xlIHN0ZWFsIHNob3VsZCBub3cgd29yayAncGVyZmVjdGx5JykNCgkJCQkJUGVyZmVjdGx5IGFzIGluIGl0J2xsIGNhc3QgYWJpbGl0aWVzLg0KCQkJCQlJdCdsbCBzdGVhbCBldmVuIGlmIG5vIGVuZW1pZXMgYXJlIG5lYXIsIHNvIGJlIGNhcmVmdWwgd2l0aCB0aGlzLg0KCQkJCQlJJ2xsIGFkanVzdCB0aGlzIGxhdGVyLCBzbyB5b3UgY2FuIGFkanVzdCB0aGlzIHRvIHlvdXIgb3duIHNldHRpbmdzLg0KCQkJCUFkZGVkIG1vcmUgb3B0aW9ucyB0byBEcmF3IEtpbGxhYmxlDQoJCQkJUmUtZW5hYmxlZCBub3JtYWwgU3hPcmJXYWxrDQoJCQkJQ2hhbmdlZCBJZ25pdGUgc2V0dGluZ3MNCgkJCQkJTm9ybWFsIGtpbGxzdGVhbCBJZ25pdGUgaXMgbm93IGluY2x1ZGVkIGluIEF1dG9LaWxsDQoJCQkJCUlnbml0ZSBraWxsIHdpdGggQ29tYm8gaXMgbm93IGluY2x1ZGVkIGluIE1pc2MgPiBJZ25pdGUNCgkJCTIuMjANCgkJCQlKdW5nbGUgU3RlYWwgbm93IGhhcyBvcHRpb25hbCBzZXR0aW5ncw0KCQkJCVJld3JvdGUgQXV0b0tpbGwgdG8gbG9vayBtb3JlIGFjY3VyYXRlbHkgZm9yIGFsbCBwb3NzaWJpbGl0aWVzDQoJCQkJTm93IGdldHMgYSB0YXJnZXQgdGhyb3VnaCBPcmJXYWxrZXINCgkJCQkJU3VwcG9ydHMgU0FDIFJlYm9ybiAvIE1NQSBhbmQgU3hPcmJXYWxrDQoJCQkJRWRpdGVkIG1lbnUgb2YgQXV0byBLaWxsDQoJCQkJCUFkZGVkIG1vcmUgb3B0aW9zDQoJCQkJT3B0aW9uIHRvIGRpc2FibGUgQUEgaW4gY29tYm8NCgkJCQlUaGUgS2lsbCBUZXh0IHNob3VsZCBub3cgaGF2ZSBERkcNCgkJCQlGZXcgcGVyZm9ybWFuY2UgdHdlYWtzIChTY3JpcHQgc2hvdWxkIG1heCBnaXZlIGEgMjBmcHMgZHJvcCkNCgkJCTIuMjUNCgkJCQlSIGluIENvbWJvIG1vZGUgbm93Og0KCQkJCQlOb3JtYWwNCgkJCQkJU3R1bg0KCQkJCQlLaWxsYWJsZQ0KCQkJMi4yNw0KCQkJCVBlcmZvcm1hbmNlIHR3ZWFrcw0KCQkJMi4yOA0KCQkJCU1pbm9yIGJ1ZyBmaXhlcw0KCQkJMi4zMA0KCQkJCVJlYWxpc2VkIHNvbWV0aGluZyBkaWRuJ3Qgd29yaywgc28gdG9vayBpdCBvdXQNCgkJCTIuMzMNCgkJCQlEZWxldGVkIFNwZWxsIERhbWFnZSBMaWJyYXJ5IHJlcXVpcmVtZW50DQoJCVNjcmlwdCBDb2RlZCBieSBUb3RhbGx5IExlZ3QuDQoJCUlmIHlvdSBoYXZlIGFueSBxdWVzdGlvbnMsIHBsZWFzZSBwb3N0IGluIHRoZSB0aHJlYWQgb2Ygc2VuZCBtZSBhbiBQTS4gWW91IGFyZSBhbHdheXMgZnJlZSB0byBzZW5kIG1lIGEgUE0gcmVnYXJkaW5nIHRoaXMgc2NyaXB0IG9yIHJlZ2FyZGluZyBhbm90aGVyLg0KCQlJZiB5b3UgdXNlIHRoaXMgc2NyaXB0LCBwbGVhc2UgZ2l2ZSBtZSBmZWVkYmFjayBvbiBob3cgaXQgd29ya3MgYW5kIGhvdyB0byBpbXByb3ZlLiBJZiBzb21ldGhpbmcgZG9lc24ndCB3b3JrLCBkb24ndCBqdXN0IGdvIHRvIGFub3RoZXIgc2NyaXB0LiBUZWxsIG1lDQoJCQl3aGF0IHdlbnQgd3JvbmcgYW5kIEknbGwgdHJ5IG15IGJlc3QgdG8gZml4IGl0IGFzIHNvb24gYXMgcG9zc2libGUuDQoJXV0NCg0KDQppZiBteUhlcm8uY2hhck5hbWUgfj0gIkFubmllIiB0aGVuIHJldHVybiBlbmQNCg0KZnVuY3Rpb24gYXV0aCgpDQogIGExID0gR2V0V2ViUmVzdWx0KCdyYXcuZ2l0aHViLmNvbScsJy9YLUJveDcyNzQ5Ni94LWJveC9tYXN0ZXIvUiZCRXpyZWFsLnR4dCcpDQogIGlmIHN0cmluZy5maW5kKGExLCJYLUJveCIpIHRoZW4NCgkJcmV0dXJuIHRydWUNCgllbmQNCiAgaWYgc3RyaW5nLmZpbmQoYTEsR2V0VXNlcigpKSB0aGVuDQoJcmV0dXJuIHRydWUNCgllbHNlDQoJcmV0dXJuIGZhbHNlDQoJZW5kDQplbmQNCg0KaWYgbm90IGF1dGgoKSB0aGVuIHJldHVybiBlbmQNCg0KDQotLVtbCQlBdXRvIFVwZGF0ZQkJXV0NCmxvY2FsIHZlcnNpb24gPSAiMS4wMSINCmxvY2FsIGF1dGhvciA9ICJYLUJveCINCmxvY2FsIFNDUklQVF9OQU1FID0gIlImQi1Bbm5pZSINCmxvY2FsIEFVVE9VUERBVEUgPSB0cnVlDQpsb2NhbCBVUERBVEVfSE9TVCA9ICJyYXcuZ2l0aHViLmNvbSINCmxvY2FsIFVQREFURV9QQVRIID0gIi9YLUJveDcyNzQ5Ni94LWJvdC9tYXN0ZXIvUi1CQW5uaWUvUiUyNkJBbm5pZS5sdWEiLi4iP3JhbmQ9Ii4ubWF0aC5yYW5kb20oMSwxMDAwMCkNCmxvY2FsIFVQREFURV9GSUxFX1BBVEggPSBTQ1JJUFRfUEFUSC4uR2V0Q3VycmVudEVudigpLkZJTEVfTkFNRQ0KbG9jYWwgVVBEQVRFX1VSTCA9ICJodHRwczovLyIuLlVQREFURV9IT1NULi5VUERBVEVfUEFUSA0KDQpmdW5jdGlvbiBBdXRvdXBkYXRlck1zZyhtc2cpIHByaW50KCI8Zm9udCBjb2xvcj1cIiNGRjAwMDBcIj48Yj5SJkJBbm5pZTo8L2I+PC9mb250PiA8Zm9udCBjb2xvcj1cIiNGRkZGRkZcIj4iLi5tc2cuLiIuPC9mb250PiIpIGVuZA0KaWYgQVVUT1VQREFURSB0aGVuDQoJbG9jYWwgU2VydmVyRGF0YSA9IEdldFdlYlJlc3VsdChVUERBVEVfSE9TVCwgIi9YLUJveDcyNzQ5Ni94LWJvdC9tYXN0ZXIvUi1CQW5uaWUvTkFubmllLnZlcnNpb24iKQ0KCWlmIFNlcnZlckRhdGEgdGhlbg0KCQlTZXJ2ZXJWZXJzaW9uID0gdHlwZSh0b251bWJlcihTZXJ2ZXJEYXRhKSkgPT0gIm51bWJlciIgYW5kIHRvbnVtYmVyKFNlcnZlckRhdGEpIG9yIG5pbA0KCQlpZiBTZXJ2ZXJWZXJzaW9uIHRoZW4NCgkJCWlmIHRvbnVtYmVyKHZlcnNpb24pIDwgU2VydmVyVmVyc2lvbiB0aGVuDQoJCQkJQXV0b3VwZGF0ZXJNc2coIk5ldyB2ZXJzaW9uIGF2YWlsYWJsZSAiLi5TZXJ2ZXJWZXJzaW9uKQ0KCQkJCUF1dG91cGRhdGVyTXNnKCJVcGRhdGluZywgcGxlYXNlIGRvbid0IHByZXNzIEY5IikNCgkJCQlEZWxheUFjdGlvbihmdW5jdGlvbigpIERvd25sb2FkRmlsZShVUERBVEVfVVJMLCBVUERBVEVfRklMRV9QQVRILCBmdW5jdGlvbiAoKSBBdXRvdXBkYXRlck1zZygiU3VjY2Vzc2Z1bGx5IHVwZGF0ZWQuICgiLi52ZXJzaW9uLi4iID0+ICIuLlNlcnZlclZlcnNpb24uLiIpLCBwcmVzcyBGOSB0d2ljZSB0byBsb2FkIHRoZSB1cGRhdGVkIHZlcnNpb24uIikgZW5kKSBlbmQsIDMpDQoJCQllbHNlDQoJCQkJQXV0b3VwZGF0ZXJNc2coIllvdSBoYXZlIGdvdCB0aGUgbGF0ZXN0IHZlcnNpb24gKCIuLlNlcnZlclZlcnNpb24uLiIpIikNCgkJCWVuZA0KCQllbmQNCgllbHNlDQoJCUF1dG91cGRhdGVyTXNnKCJFcnJvciBkb3dubG9hZGluZyB2ZXJzaW9uIGluZm8iKQ0KCWVuZA0KZW5kDQoNCi0tIExpYiBVcGRhdGVyDQpsb2NhbCBSRVFVSVJFRF9MSUJTID0gew0KCVsiU3hPcmJXYWxrIl0gPSAiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL1N1cGVyeDMyMS9Cb0wvbWFzdGVyL2NvbW1vbi9TeE9yYldhbGsubHVhIg0KfQ0KDQpsb2NhbCBET1dOTE9BRElOR19MSUJTLCBET1dOTE9BRF9DT1VOVCA9IGZhbHNlLCAwDQoNCmZ1bmN0aW9uIEFmdGVyRG93bmxvYWQoKQ0KCURPV05MT0FEX0NPVU5UID0gRE9XTkxPQURfQ09VTlQgLSAxDQoJaWYgRE9XTkxPQURfQ09VTlQgPT0gMCB0aGVuDQoJCURPV05MT0FESU5HX0xJQlMgPSBmYWxzZQ0KCQlwcmludCgiPGI+PGZvbnQgY29sb3I9XCIjNjY5OUZGXCI+UmVxdWlyZWQgbGlicmFyaWVzIGRvd25sb2FkZWQgc3VjY2Vzc2Z1bGx5LCBwbGVhc2UgcmVsb2FkIChkb3VibGUgRjkpLjwvZm9udD4iKQ0KCWVuZA0KZW5kDQoNCmZvciBET1dOTE9BRF9MSUJfTkFNRSwgRE9XTkxPQURfTElCX1VSTCBpbiBwYWlycyhSRVFVSVJFRF9MSUJTKSBkbw0KCWlmIEZpbGVFeGlzdChMSUJfUEFUSCAuLiBET1dOTE9BRF9MSUJfTkFNRSAuLiAiLmx1YSIpIHRoZW4NCgkJcmVxdWlyZShET1dOTE9BRF9MSUJfTkFNRSkNCgllbHNlDQoJCURPV05MT0FESU5HX0xJQlMgPSB0cnVlDQoJCURPV05MT0FEX0NPVU5UID0gRE9XTkxPQURfQ09VTlQgKyAxDQoJCURvd25sb2FkRmlsZShET1dOTE9BRF9MSUJfVVJMLCBMSUJfUEFUSCAuLiBET1dOTE9BRF9MSUJfTkFNRS4uIi5sdWEiLCBBZnRlckRvd25sb2FkKQ0KCWVuZA0KZW5kDQoNCi0tIERlY2xhcmluZyB2YXJpYWJsZXMNCmxvY2FsIGxhc3RMZXZlbCA9IG15SGVyby5sZXZlbCAtIDENCmxvY2FsIFFkbWcsIFdkbWcsIFJkbWcsIERGR2RtZywgaURtZywgdG90YWxEYW1hZ2UsIGhlYWx0aCwgbWFuYSwgbWF4SGVhbHRoLCBtYXhNYW5hID0gMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMA0KbG9jYWwgY2FuU3R1biA9IGZhbHNlDQpsb2NhbCBFbmVteU1pbmlvbnMgPSBtaW5pb25NYW5hZ2VyKE1JTklPTl9FTkVNWSwgNjAwLCBteUhlcm8sIE1JTklPTl9TT1JUX0hFQUxUSF9ERUMpDQpsb2NhbCBKdW5nbGVNaW5pb25zID0gbWluaW9uTWFuYWdlcihNSU5JT05fSlVOR0xFLCA2MDAsIG15SGVybywgTUlOSU9OX1NPUlRfSEVBTFRIX0FTQykNCmxvY2FsIG1pbmlvbnNTdGVhbCA9IHsiU1JVX0JsdWUiLCAiU1JVX1JlZCIsICJTUlVfRHJhZ29uIiwgIlNSVV9CYXJvbiJ9DQpsb2NhbCBpZ25pdGUsIGhlYWwsIGJhcnJpZXIsIGZsYXNoID0gbmlsLCBuaWwsIG5pbCwgbmlsDQpsb2NhbCBwYXNzaXZlU3RhY2tzID0gMA0KbG9jYWwgaGFzVGliYmVycyA9IGZhbHNlDQpsb2NhbCBpc1JlY2FsbGluZyA9IGZhbHNlDQpsb2NhbCB0YXJnZXQsIFJ0YXJnZXQgPSBuaWwsIG5pbA0KbG9jYWwgUXJlYWR5LCBXcmVhZHksIEVyZWFkeSwgUnJlYWR5LCBIcmVhZHksIEJyZWFkeSwgSXJlYWR5LCBGcmVhZHkgPSBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlDQpsb2NhbCB1c2VGbGFzaCA9IGZhbHNlDQpsb2NhbCBTeE9yYkxvYWRlZCwgU0FDTG9hZGVkLCBNTUFMb2FkZWQgPSBmYWxzZSwgZmFsc2UsIGZhbHNlDQpsb2NhbCBlbmVteUp1bmdsZXJzID0ge30NCmxvY2FsIGFsbHlKdW5nbGVycyA9IHt9DQpsb2NhbCBBQWRpc2FibGVkID0gZmFsc2UNCmxvY2FsIGhlYWx0aFBvdCwgbWFuYVBvdCA9IGZhbHNlLCBmYWxzZQ0KbG9jYWwgbWFuYVBvdA0KbG9jYWwgVGV4dExpc3QgPSB7IkRGRyA9IGtpbGwiLCAiSWduaXRlID0ga2lsbCIsICJRID0ga2lsbCIsICJRICsgREZHID0ga2lsbCIsICJRICsgaWduaXRlID0ga2lsbCIsICJRICsgaWduaXRlICsgREZHID0ga2lsbCIsICJRVyA9IGtpbGwiLCAiUVcgKyBERkcgPSBraWxsIiwgIlFXICsgaWduaXRlID0ga2lsbCIsICJRVyArIGlnbml0ZSArIERGRyA9IGtpbGwiLCAiUVdSID0ga2lsbCIsICJRV1IgKyBERkcgPSBraWxsIiwgIlFXUiArIGlnbml0ZSA9IGtpbGwiLCAiUVdSICsgaWduaXRlICsgREZHID0ga2lsbCIsICJOb3QgS2lsbGFibGUifQ0KbG9jYWwgS2lsbFRleHQgPSB7fQ0KDQoNCi0tUGVyZm9ybSBvbiBsb2FkDQpmdW5jdGlvbiBPbkxvYWQoKQ0KDQoNCglpZiBfRy5BdXRvQ2Fycnkgfj0gbmlsIHRoZW4NCgkJcHJpbnQoIjxmb250IGNvbG9yID0gXCIjRkYwMDAwXCI+PGI+VG90YWxseSBBbm5pZTo8L2I+IDwvZm9udD48Zm9udCBjb2xvciA9IFwiI2ZmZjhlN1wiPlNBQyBmb3VuZDwvZm9udD4iKQ0KCQlTQUNMb2FkZWQgPSB0cnVlDQoJZWxzZWlmIF9HLk1NQV9Mb2FkZWQgfj0gbmlsIHRoZW4NCgkJcHJpbnQoIjxmb250IGNvbG9yID0gXCIjRkYwMDAwXCI+PGI+VG90YWxseSBBbm5pZTo8L2I+IDwvZm9udD48Zm9udCBjb2xvciA9IFwiI2ZmZjhlN1wiPk1NQSBmb3VuZDwvZm9udD4iKQ0KCQlNTUFMb2FkZWQgPSB0cnVlDQoJZWxzZQ0KCQlwcmludCgiPGZvbnQgY29sb3IgPSBcIiNGRjAwMDBcIj48Yj5Ub3RhbGx5IEFubmllOjwvYj4gPC9mb250Pjxmb250IGNvbG9yID0gXCIjZmZmOGU3XCI+U3hPcmJXYWxrIGZvdW5kPC9mb250PiIpDQoJCVN4T3JiTG9hZGVkID0gdHJ1ZQ0KCWVuZA0KDQogCS0tIE9yYldhbGtlcg0KCU9yYldhbGsgPSBTeE9yYldhbGsoKQ0KDQoJRmluZFN1bW1vbmVycygpDQoNCglGaW5kSnVuZ2xlcnMoKQ0KDQoJbGV2ZWxTZXF1ZW5jZXMgPSB7DQoJCQlbMV0gPSB7IF9RLCBfVywgX1EsIF9FLCBfUSwgX1IsIF9RLCBfVywgX1EsIF9XLCBfUiwgX1csIF9XLCBfRSwgX0UsIF9SLCBfRSwgX0UgfSwNCgkJCVsyXSA9IHsgX1csIF9RLCBfVywgX0UsIF9XLCBfUiwgX1csIF9RLCBfVywgX1EsIF9SLCBfUSwgX1EsIF9FLCBfRSwgX1IsIF9FLCBfRSB9LA0KCX0NCg0KIAktLSBUYXJnZXRTZWxlY3Rvcg0KIAl0cyA9IFRhcmdldFNlbGVjdG9yKFRBUkdFVF9MT1dfSFBfUFJJT1JJVFksIDYyNSkNCg0KIAlEcmF3TWVudSgpDQoNCiAJaWYgU0FDTG9hZGVkIG9yIE1NQUxvYWRlZCB0aGVuDQogCQlNZW51Lk9yYndhbGtlci5HZW5lcmFsLkVuYWJsZWQgPSBmYWxzZQ0KIAllbmQNCg0KZW5kDQoNCi0tIFBlcmZvcm0gZXZlcnkgdGltZQ0KZnVuY3Rpb24gT25UaWNrKCkNCg0KCXRhcmdldCA9IEdldE9yYlRhcmdldCgpDQoNCglTcGVsbENoZWNrcygpDQoNCglpZiBNZW51LmhhcmFzcy5oYXJhc3Mgb3IgTWVudS5oYXJhc3MuaGFyYXNzVCB0aGVuDQoJCUhhcmFzcygpDQoJZW5kDQoNCglpZiBNZW51LmNvbWJvLmNvbWJvIHRoZW4NCgkJQ29tYm8oKQ0KCWVuZA0KDQoJaWYgTWVudS5jb21iby5kaXNhYmxlQUEgYW5kIE1lbnUuY29tYm8uY29tYm8gdGhlbg0KCQlpZiBTeE9yYkxvYWRlZCBhbmQgbm90IEFBZGlzYWJsZWQgdGhlbg0KCQkJT3JiV2FsazpEaXNhYmxlQXR0YWNrcygpDQoJCQlBQWRpc2FibGVkID0gdHJ1ZQ0KCQllbmQNCgllbmQNCg0KCWlmIE1lbnUuY29tYm8uZGlzYWJsZUFBIGFuZCBub3QgTWVudS5jb21iby5jb21ibyBhbmQgQUFkaXNhYmxlZCB0aGVuDQoJCWlmIFN4T3JiTG9hZGVkIHRoZW4NCgkJCU9yYldhbGs6RW5hYmxlQXR0YWNrcygpDQoJCQlBQWRpc2FibGVkID0gZmFsc2UNCgkJZW5kDQoJZW5kDQoNCglBdXRvSGFyYXNzKCkNCg0KCWlmIE1lbnUuYXV0b1IuYXV0b1VsdCB0aGVuDQoJCUF1dG9VbHQoKQ0KCWVuZA0KDQoJaWYgTWVudS5hdXRva2lsbC5hdXRva2lsbCBhbmQgbm90IE1lbnUuY29tYm8uY29tYm8gdGhlbg0KCQlLaWxsU3RlYWxQcmVjaXNlKCkNCgllbmQNCg0KCS0tW1sgVGVtcG9yYXJ5IGRpc2FibGVkDQoJaWYgTWVudS5taXNjLmF1dG9sZXZlbC5sZXZlbEF1dG8gdGhlbg0KCQlBdXRvTGV2ZWwoKQ0KCWVuZA0KCS0tXV0NCglpZiBNZW51Lm1pc2MuYXV0b3BvdGlvbnMudXNlUG90aW9ucyB0aGVuDQoJCURyaW5rUG90aW9ucygpDQoJZW5kDQoNCglpZiBNZW51LmZhcm0uZmFybSBhbmQgbm90IE1lbnUuY29tYm8uY29tYm8gYW5kIGlzUmVjYWxsaW5nIH49IHRydWUgdGhlbg0KCQlGYXJtKCkNCgllbmQNCg0KCWlmIE1lbnUuanVuZ2xlLnVzZUp1bmdsZSB0aGVuDQoJCUp1bmdsZVN0ZWFsKCkNCgllbmQNCg0KCWlmIE1lbnUubWlzYy56aG9ueWFzLnpob255YXMgdGhlbg0KCQlaaG9ueWFzKCkNCgllbmQNCg0KCWlmIE1lbnUubWlzYy5Fc2V0dGluZ3MucHJvY0UgYW5kIGNhblN0dW4gfj0gdHJ1ZSBhbmQgaXNSZWNhbGxpbmcgfj0gdHJ1ZSB0aGVuDQoJCUNhc3RFKCkNCgllbmQNCg0KCWlmIE1lbnUubWlzYy5Fc2V0dGluZ3MucHJvY0VXIGFuZCBJbkZvdW50YWluKCkgYW5kIEVyZWFkeSBhbmQgV3JlYWR5IGFuZCBjYW5TdHVuIH49IHRydWUgdGhlbg0KCQlDYXN0RSgpDQoJCURlbGF5QWN0aW9uKGZ1bmN0aW9uKCkNCgkJCWlmIGNhblN0dW4gfj0gdHJ1ZSB0aGVuDQoJCQkJQ2FzdFNwZWxsKF9XLCBtb3VzZVBvcy54LCBtb3VzZVBvcy56KQ0KCQkJZW5kDQoJCWVuZCwgMC41KQ0KDQoJZW5kDQoNCglpZiBoZWFsIH49IG5pbCBhbmQgTWVudS5taXNjLmF1dG9oZWFsLnVzZUhlYWwgYW5kIG5vdCBJbkZvdW50YWluKCkgdGhlbg0KCQlVc2VIZWFsKCkNCgllbmQNCg0KCWlmIGlnbml0ZSB+PSBuaWwgYW5kIE1lbnUubWlzYy5hdXRvaWduaXRlLnVzZUlnbml0ZSBhbmQgTWVudS5jb21iby5jb21ibyB0aGVuDQoJCVVzZUlnbml0ZSgpDQoJZW5kDQoJaWYgYmFycmllciB+PSBuaWwgYW5kIE1lbnUubWlzYy5hdXRvYmFycmllci51c2VCYXJyaWVyIHRoZW4NCgkJVXNlQmFycmllcigpDQoJZW5kDQoNCglNZW51Q2hlY2soKQ0KDQoNCglEcmF3S2lsbGFibGUoKQ0KDQoNCmVuZA0KDQpmdW5jdGlvbiBPbkRyYXcoKQ0KIC0tIERyYXcgU2tpbGwgcmFuZ2UNCglpZiBNZW51LmRyYXdpbmdzLmRyYXcgdGhlbg0KCSAJaWYgTWVudS5kcmF3aW5ncy5kcmF3USBvciBNZW51LmRyYXdpbmdzLmRyYXdXIHRoZW4NCgkJCURyYXdDaXJjbGUobXlIZXJvLngsIG15SGVyby55LCBteUhlcm8ueiwgNjI1LCAweDExMTExMSkNCgkgCWVuZA0KCSAJaWYgTWVudS5kcmF3aW5ncy5kcmF3UiB0aGVuDQoJIAkJRHJhd0NpcmNsZShteUhlcm8ueCwgbXlIZXJvLnksIG15SGVyby56LCA2MDAsIDB4MTExMTExKQ0KCSAJZW5kDQoNCgkgCWlmIE1lbnUuZHJhd2luZ3MuZHJhd0tpbGxhYmxlIHRoZW4NCgkgCQlmb3IgaSA9IDEsIGhlcm9NYW5hZ2VyLmlDb3VudCBkbw0KCSAJCQlsb2NhbCBlbmVteSA9IGhlcm9NYW5hZ2VyOmdldEhlcm8oaSkNCgkgCQkJaWYgVmFsaWRUYXJnZXQoZW5lbXkpIHRoZW4NCgkgCQkJCWxvY2FsIGJhclBvcyA9IFdvcmxkVG9TY3JlZW4oRDNEWFZFQ1RPUjMoZW5lbXkueCwgZW5lbXkueSwgZW5lbXkueikpDQoJCQkJCWxvY2FsIFBvc1ggPSBiYXJQb3MueCAtIDM1DQoJCQkJCWxvY2FsIFBvc1kgPSBiYXJQb3MueSAtIDUwDQoJCQkJCURyYXdUZXh0KFRleHRMaXN0W0tpbGxUZXh0W2ldXSwgMTUsIFBvc1gsIFBvc1ksIEFSR0IoMjU1LDI1NSwyMDQsMCkpDQoJCQkJZW5kDQoJCQllbmQNCgkgCWVuZA0KCSAJLS0tW1sNCgkgCWlmIE1lbnUuZHJhd2luZ3NbImRyYXdEYW1hZ2UiXSB0aGVuDQogICAgCQlmb3IgaSwgZW5lbXkgaW4gaXBhaXJzKEdldEVuZW15SGVyb2VzKCkpIGRvDQogICAgICAgCQkJaWYgVmFsaWRUYXJnZXQoZW5lbXkpIHRoZW4NCiAgICAgICAgICAgCQkJRHJhd0luZGljYXRvcihlbmVteSkNCiAgICAgICAgCQllbmQNCgkJCWVuZA0KIAkJZW5kDQoNCiAJCS0tXV0NCiAJZW5kDQogZW5kDQoNCg0KZnVuY3Rpb24gR2V0T3JiVGFyZ2V0KCkNCgl0czp1cGRhdGUoKQ0KCWlmIF9HLk1NQV9UYXJnZXQgYW5kIF9HLk1NQV9UYXJnZXQudHlwZSA9PSBteUhlcm8udHlwZSB0aGVuIHJldHVybiBfRy5NTUFfVGFyZ2V0IGVuZA0KCWlmIF9HLkF1dG9DYXJyeSBhbmQgX0cuQXV0b0NhcnJ5LkNyb3NzaGFpciBhbmQgX0cuQXV0b0NhcnJ5LkF0dGFja19Dcm9zc2hhaXIgYW5kIF9HLkF1dG9DYXJyeS5BdHRhY2tfQ3Jvc3NoYWlyLnRhcmdldCBhbmQgX0cuQXV0b0NhcnJ5LkF0dGFja19Dcm9zc2hhaXIudGFyZ2V0LnR5cGUgPT0gbXlIZXJvLnR5cGUgdGhlbiByZXR1cm4gX0cuQXV0b0NhcnJ5LkF0dGFja19Dcm9zc2hhaXIudGFyZ2V0IGVuZA0KCWlmIFN4T3JiTG9hZGVkIHRoZW4gcmV0dXJuIE9yYldhbGs6R2V0VGFyZ2V0KCkgZW5kDQoJcmV0dXJuIHRzLnRhcmdldA0KZW5kDQoNCg0KZnVuY3Rpb24gSGFyYXNzKCkNCg0KIAlpZiBNYW5hTWFuYWdlcigpIHRoZW4NCiAJCWlmIHRhcmdldCB+PSBuaWwgYW5kIFZhbGlkVGFyZ2V0KHRhcmdldCkgdGhlbg0KCSAJCWlmIChNZW51LmhhcmFzcy5oYXJhc3NRKSB0aGVuDQoJIAkJCUNhc3RRKHRhcmdldCkNCgkgCQllbmQNCgkgCQlpZiAoTWVudS5oYXJhc3MuaGFyYXNzVykgdGhlbg0KCSAJCQlDYXN0Vyh0YXJnZXQpDQoJIAkJZW5kDQogCQllbmQNCiAJZW5kDQplbmQNCg0KZnVuY3Rpb24gQXV0b0hhcmFzcygpDQoJaWYgTWVudS5oYXJhc3MuYXV0b1EgYW5kIGNhblN0dW4gYW5kIG5vdCBNZW51LmNvbWJvLmNvbWJvIGFuZCBNYW5hTWFuYWdlcigpIHRoZW4NCiAJCWlmIHRhcmdldCB+PSBuaWwgYW5kIFZhbGlkVGFyZ2V0KHRhcmdldCwgNTc1KSB0aGVuDQogCQkJQ2FzdFEodGFyZ2V0KQ0KIAkJZW5kDQoJZW5kDQoJLS1bWw0KCWlmIFZJUF9VU0VSIHRoZW4NCgkJaWYgTWVudS5oYXJhc3MuYXV0b1FXIGFuZCBwYXNzaXZlU3RhY2tzID49IDMgYW5kIG5vdCBNZW51LmNvbWJvLmNvbWJvIGFuZCBNYW5hTWFuYWdlcigpIHRoZW4NCgkgCQlpZiB0YXJnZXQgfj0gbmlsIGFuZCBWYWxpZFRhcmdldCh0YXJnZXQsIDU3NSkgdGhlbg0KCSAJCQlDYXN0USh0YXJnZXQpDQoJIAkJCURlbGF5QWN0aW9uKGZ1bmN0aW9uKCkgaWYgY2FuU3R1biB0aGVuIENhc3RXKHRhcmdldCkgZW5kIGVuZCwgMC41KQ0KCSAJCWVuZA0KCSAJZW5kDQoJZW5kDQoJLS1dXQ0KZW5kDQoNCmZ1bmN0aW9uIENvbWJvKCkNCglpZiB0YXJnZXQgfj0gbmlsIGFuZCBWYWxpZFRhcmdldCh0YXJnZXQsIDU5MCkgdGhlbg0KDQoJCWlmIE1lbnUuY29tYm8uUlVzYWdlLmhvd1IgPT0gMyBhbmQgUnJlYWR5IHRoZW4NCgkJCUNvbWJvUlN0dW4oKQ0KCQllbHNlDQoJCQlpZiBNZW51LmNvbWJvLmNvbWJvV2F5ID09IDEgdGhlbg0KCQkJCUNvbWJvUSgpDQoJCQllbHNlaWYgTWVudS5jb21iby5jb21ib1dheSA9PSAyIHRoZW4NCgkJCQlDb21ib1coKQ0KCQkJZWxzZWlmIE1lbnUuY29tYm8uY29tYm9XYXkgPT0gMyB0aGVuDQoJCQkJQ29tYm9SUSgpDQoJCQllbHNlaWYgTWVudS5jb21iby5jb21ib1dheSA9PSA0IHRoZW4NCgkJCQlDb21ib1JXKCkNCgkJCWVuZA0KCQllbmQNCg0KCWVuZA0KZW5kDQoNCmZ1bmN0aW9uIENvbWJvUSgpDQoJaWYgTWVudS5jb21iby5jb21ib0RGRyB0aGVuDQoJCWxvY2FsIERGR3Nsb3QgPSBHZXRJbnZlbnRvcnlTbG90SXRlbSgzMTI4KQ0KCQlpZiBERkdzbG90IH49IG5pbCBhbmQgbXlIZXJvOkNhblVzZVNwZWxsKERGR3Nsb3QpID09IFJFQURZIHRoZW4NCgkJCUNhc3RTcGVsbChERkdzbG90LCB0YXJnZXQpDQoJCWVuZA0KCWVuZA0KDQoJaWYgTWVudS5jb21iby5jb21ib1EgdGhlbg0KCQlDYXN0USh0YXJnZXQpDQoJZW5kDQoNCglpZiBNZW51LmNvbWJvLmNvbWJvVyB0aGVuDQoJCUNhc3RXKHRhcmdldCkNCgllbmQNCg0KCWlmIE1lbnUuY29tYm8uY29tYm9SIGFuZCBNZW51LmNvbWJvLlJVc2FnZVt0YXJnZXQuY2hhck5hbWVdIGFuZCBNZW51LmNvbWJvLlJVc2FnZS5ob3dSID09IDEgdGhlbg0KCQlDYXN0Uih0YXJnZXQpDQoJZWxzZWlmIE1lbnUuY29tYm8uY29tYm9SIGFuZCBNZW51LmNvbWJvLlJVc2FnZVt0YXJnZXQuY2hhck5hbWVdIGFuZCBNZW51LmNvbWJvLlJVc2FnZS5ob3dSID09IDIgdGhlbg0KCQlpZiB0YXJnZXQuaGVhbHRoIDwgZ2V0RG1nKCJSIiwgdGFyZ2V0LCBteUhlcm8sIDEpIHRoZW4NCgkJCUNhc3RSKHRhcmdldCkNCgkJZW5kDQoJZW5kDQplbmQNCg0KZnVuY3Rpb24gQ29tYm9XKCkNCglpZiBNZW51LmNvbWJvLmNvbWJvREZHIHRoZW4NCgkJbG9jYWwgREZHc2xvdCA9IEdldEludmVudG9yeVNsb3RJdGVtKDMxMjgpDQoJCWlmIERGR3Nsb3Qgfj0gbmlsIGFuZCBteUhlcm86Q2FuVXNlU3BlbGwoREZHc2xvdCkgPT0gUkVBRFkgdGhlbg0KCQkJQ2FzdFNwZWxsKERGR3Nsb3QsIHRhcmdldCkNCgkJZW5kDQoJZW5kDQoNCglpZiBNZW51LmNvbWJvLmNvbWJvVyB0aGVuDQoJCUNhc3RXKHRhcmdldCkNCgllbmQNCg0KCWlmIE1lbnUuY29tYm8uY29tYm9RIHRoZW4NCgkJQ2FzdFEodGFyZ2V0KQ0KCWVuZA0KDQoJaWYgTWVudS5jb21iby5jb21ib1IgYW5kIE1lbnUuY29tYm8uUlVzYWdlW3RhcmdldC5jaGFyTmFtZV0gYW5kIE1lbnUuY29tYm8uUlVzYWdlLmhvd1IgPT0gMSB0aGVuDQoJCUNhc3RSKHRhcmdldCkNCgllbHNlaWYgTWVudS5jb21iby5jb21ib1IgYW5kIE1lbnUuY29tYm8uUlVzYWdlW3RhcmdldC5jaGFyTmFtZV0gYW5kIE1lbnUuY29tYm8uUlVzYWdlLmhvd1IgPT0gMiB0aGVuDQoJCWlmIHRhcmdldC5oZWFsdGggPCBnZXREbWcoIlIiLCB0YXJnZXQsIG15SGVybywgMSkgdGhlbg0KCQkJQ2FzdFIodGFyZ2V0KQ0KCQllbmQNCgllbmQNCmVuZA0KDQpmdW5jdGlvbiBDb21ib1JRKCkNCglpZiBNZW51LmNvbWJvLmNvbWJvREZHIHRoZW4NCgkJbG9jYWwgREZHc2xvdCA9IEdldEludmVudG9yeVNsb3RJdGVtKDMxMjgpDQoJCWlmIERGR3Nsb3Qgfj0gbmlsIGFuZCBteUhlcm86Q2FuVXNlU3BlbGwoREZHc2xvdCkgPT0gUkVBRFkgdGhlbg0KCQkJQ2FzdFNwZWxsKERGR3Nsb3QsIHRhcmdldCkNCgkJZW5kDQoJZW5kDQoNCglpZiBNZW51LmNvbWJvLmNvbWJvUiBhbmQgTWVudS5jb21iby5SVXNhZ2VbdGFyZ2V0LmNoYXJOYW1lXSBhbmQgTWVudS5jb21iby5SVXNhZ2UuaG93UiA9PSAxIHRoZW4NCgkJQ2FzdFIodGFyZ2V0KQ0KCWVsc2VpZiBNZW51LmNvbWJvLmNvbWJvUiBhbmQgTWVudS5jb21iby5SVXNhZ2VbdGFyZ2V0LmNoYXJOYW1lXSBhbmQgTWVudS5jb21iby5SVXNhZ2UuaG93UiA9PSAyIHRoZW4NCgkJaWYgdGFyZ2V0LmhlYWx0aCA8IGdldERtZygiUiIsIHRhcmdldCwgbXlIZXJvLCAxKSB0aGVuDQoJCQlDYXN0Uih0YXJnZXQpDQoJCWVuZA0KCWVuZA0KDQoJaWYgTWVudS5jb21iby5jb21ib1EgdGhlbg0KCQlDYXN0USh0YXJnZXQpDQoJZW5kDQoNCglpZiBNZW51LmNvbWJvLmNvbWJvVyB0aGVuDQoJCUNhc3RXKHRhcmdldCkNCgllbmQNCmVuZA0KDQpmdW5jdGlvbiBDb21ib1JXKCkNCglpZiBNZW51LmNvbWJvLmNvbWJvREZHIHRoZW4NCgkJbG9jYWwgREZHc2xvdCA9IEdldEludmVudG9yeVNsb3RJdGVtKDMxMjgpDQoJCWlmIERGR3Nsb3Qgfj0gbmlsIGFuZCBteUhlcm86Q2FuVXNlU3BlbGwoREZHc2xvdCkgPT0gUkVBRFkgdGhlbg0KCQkJQ2FzdFNwZWxsKERGR3Nsb3QsIHRhcmdldCkNCgkJZW5kDQoJZW5kDQoNCglpZiBNZW51LmNvbWJvLmNvbWJvUiBhbmQgTWVudS5jb21iby5SVXNhZ2VbdGFyZ2V0LmNoYXJOYW1lXSBhbmQgTWVudS5jb21iby5SVXNhZ2UuaG93UiA9PSAxIHRoZW4NCgkJQ2FzdFIodGFyZ2V0KQ0KCWVsc2VpZiBNZW51LmNvbWJvLmNvbWJvUiBhbmQgTWVudS5jb21iby5SVXNhZ2VbdGFyZ2V0LmNoYXJOYW1lXSBhbmQgTWVudS5jb21iby5SVXNhZ2UuaG93UiA9PSAyIHRoZW4NCgkJaWYgdGFyZ2V0LmhlYWx0aCA8IGdldERtZygiUiIsIHRhcmdldCwgbXlIZXJvLCAxKSB0aGVuDQoJCQlDYXN0Uih0YXJnZXQpDQoJCWVuZA0KCWVuZA0KDQoJaWYgTWVudS5jb21iby5jb21ib1cgdGhlbg0KCQlDYXN0Vyh0YXJnZXQpDQoJZW5kDQoNCglpZiBNZW51LmNvbWJvLmNvbWJvUSB0aGVuDQoJCUNhc3RRKHRhcmdldCkNCgllbmQNCg0KZW5kDQoNCmZ1bmN0aW9uIENvbWJvUlN0dW4oKQ0KDQoJaWYgY2FuU3R1biBhbmQgTWVudS5jb21iby5jb21ib1IgdGhlbg0KCQlDYXN0Uih0YXJnZXQpDQoJZW5kDQoNCglpZiBNZW51LmNvbWJvLmNvbWJvREZHIHRoZW4NCgkJbG9jYWwgREZHc2xvdCA9IEdldEludmVudG9yeVNsb3RJdGVtKDMxMjgpDQoJCWlmIERGR3Nsb3Qgfj0gbmlsIGFuZCBteUhlcm86Q2FuVXNlU3BlbGwoREZHc2xvdCkgPT0gUkVBRFkgdGhlbg0KCQkJQ2FzdFNwZWxsKERGR3Nsb3QsIHRhcmdldCkNCgkJZW5kDQoJZW5kDQoNCglpZiBNZW51LmNvbWJvLmNvbWJvV2F5ID09IDEgdGhlbg0KCQlpZiBNZW51LmNvbWJvLmNvbWJvUSB0aGVuDQoJCQlDYXN0USh0YXJnZXQpDQoJCWVuZA0KCWVsc2UNCgkJaWYgTWVudS5jb21iby5jb21ib1cgdGhlbg0KCQkJQ2FzdFcodGFyZ2V0KQ0KCQllbmQNCgllbmQNCg0KCWlmIGNhblN0dW4gYW5kIE1lbnUuY29tYm8uY29tYm9SIHRoZW4NCgkJQ2FzdFIodGFyZ2V0KQ0KCWVuZA0KDQoJaWYgTWVudS5jb21iby5jb21ib1dheSA9PSAxIHRoZW4NCgkJaWYgTWVudS5jb21iby5jb21ib1cgdGhlbg0KCQkJQ2FzdFcodGFyZ2V0KQ0KCQllbmQNCgllbHNlDQoJCWlmIE1lbnUuY29tYm8uY29tYm9RIHRoZW4NCgkJCUNhc3RRKHRhcmdldCkNCgkJZW5kDQoJZW5kDQoNCglDYXN0RSgpDQoNCglpZiBjYW5TdHVuIGFuZCBNZW51LmNvbWJvLmNvbWJvUiB0aGVuDQoJCUNhc3RSKHRhcmdldCkNCgllbmQNCg0KCWlmIE1lbnUuY29tYm8uY29tYm9SIGFuZCBjYW5TdHVuIHRoZW4NCgkJQ2FzdFIodGFyZ2V0KQ0KCWVuZA0KDQplbmQNCg0KZnVuY3Rpb24gQXV0b1VsdCgpDQoJaWYgZmxhc2ggfj0gbmlsIHRoZW4NCgkJdXNlRmxhc2ggPSBGbGFzaFNldHRpbmdzKCkNCgllbmQNCg0KCVJ0YXJnZXQgPSBSZXR1cm5CZXN0VWx0VGFyZ2V0KE1lbnUuYXV0b1IuaGl0WCwgdXNlRmxhc2gpDQoJaWYgUnRhcmdldCB+PSBuaWwgdGhlbg0KCQlpZiBHZXREaXN0YW5jZShSdGFyZ2V0KSA8IDYwMCB0aGVuDQoJCQlDYXN0UihSdGFyZ2V0KQ0KCQllbHNlaWYgR2V0RGlzdGFuY2UoUnRhcmdldCkgPiA2MDAgYW5kIEdldERpc3RhbmNlKFJ0YXJnZXQpIDwgMTAwMCBhbmQgRnJlYWR5IGFuZCBScmVhZHkgdGhlbg0KCQkJbG9jYWwgZmxhc2hQb3MgPSBWZWN0b3IobXlIZXJvLnZpc2lvblBvcykgKyAoVmVjdG9yKFJ0YXJnZXQpIC0gbXlIZXJvLnZpc2lvblBvcyk6bm9ybWFsaXplZCgpICogNDAwDQoJCQlpZiBub3QgSXNXYWxsKEQzRFhWRUNUT1IzKGZsYXNoUG9zLngsIGZsYXNoUG9zLnksIGZsYXNoUG9zLnopKSB0aGVuDQoJCQkJQ2FzdFNwZWxsKGZsYXNoLCBmbGFzaFBvcy54LCBmbGFzaFBvcy56KQ0KCQkJCURlbGF5QWN0aW9uKENhc3RSKFJ0YXJnZXQpLCAwLjMpDQoJCQllbmQNCgkJZW5kDQoJZW5kDQplbmQNCg0KZnVuY3Rpb24gRmxhc2hTZXR0aW5ncygpDQoJaWYgTWVudS5mbGFzaC51c2VGbGFzaCBhbmQgQ291bnRFbmVteUhlcm9JblJhbmdlKE1lbnUuZmxhc2guZW5lbWllc3JhbmdlKSA+PSBNZW51LmZsYXNoLmVuZW1pZXMgYW5kIENvdW50QWxseUhlcm9JblJhbmdlKE1lbnUuZmxhc2guYWxsaWVzcmFuZ2UpID49IE1lbnUuZmxhc2guYWxsaWVzIGFuZCBGcmVhZHkgdGhlbg0KCQlyZXR1cm4gdHJ1ZQ0KCWVuZA0KCXJldHVybiBmYWxzZQ0KZW5kDQoNCmZ1bmN0aW9uIENhc3RRKHRhcmdldCkNCglpZiBRcmVhZHkgYW5kIG15SGVyby5jYW5BdHRhY2sgYW5kIG5vdCBteUhlcm8uZGVhZCB0aGVuDQogICAJIAlDYXN0U3BlbGwoX1EsIHRhcmdldCkNCiAgIAllbmQNCmVuZA0KDQoNCmZ1bmN0aW9uIENhc3RXKHRhcmdldCkNCglpZiBXcmVhZHkgYW5kIG15SGVyby5jYW5BdHRhY2sgYW5kIG5vdCBteUhlcm8uZGVhZCB0aGVuDQogICAgCUNhc3RTcGVsbChfVywgdGFyZ2V0KQ0KICAJZW5kDQplbmQNCg0KZnVuY3Rpb24gQ2FzdEUoKQ0KCWlmIEVyZWFkeSBhbmQgbXlIZXJvLmNhbkF0dGFjayBhbmQgbm90IG15SGVyby5kZWFkIHRoZW4NCgkJQ2FzdFNwZWxsKF9FKQ0KICAgIGVuZA0KZW5kDQoNCmZ1bmN0aW9uIENhc3RSKHRhcmdldCkNCglpZiBScmVhZHkgYW5kIG15SGVyby5jYW5BdHRhY2sgYW5kIG5vdCBteUhlcm8uZGVhZCBhbmQgbm90IGhhc1RpYmJlcnMgdGhlbg0KCQlDYXN0U3BlbGwoX1IsIHRhcmdldCkNCiAgICBlbmQNCmVuZA0KDQpmdW5jdGlvbiBGYXJtKCkNCglFbmVteU1pbmlvbnM6dXBkYXRlKCkNCg0KCWlmIE1lbnUuZmFybS5mYXJtU3R1biBhbmQgY2FuU3R1biB0aGVuIHJldHVybiBlbmQNCg0KCWlmIE1lbnUuZmFybS5mYXJtUSB0aGVuDQoJCUZhcm1RKCkNCgllbmQNCglpZiBNZW51LmZhcm0uZmFybVcgdGhlbg0KCQlGYXJtVygpDQoJZW5kDQoNCmVuZA0KDQpmdW5jdGlvbiBGYXJtVygpDQoJZm9yIGksIG1pbmlvbiBpbiBwYWlycyhFbmVteU1pbmlvbnMub2JqZWN0cykgZG8NCgkJaWYgTWVudS5mYXJtLmZhcm1XIHRoZW4NCgkJCWxvY2FsIFFkbWcsIFdtZyA9IENhbGNTcGVsbERhbWFnZShtaW5pb24pDQoJCQlpZiBtaW5pb24gfj0gbmlsIGFuZCBub3QgbWluaW9uLmRlYWQgYW5kIG1pbmlvbi52aXNpYmxlIGFuZCBtaW5pb24uaGVhbHRoIDwgV2RtZyBhbmQgVmFsaWRUYXJnZXQobWluaW9uLCA2MjUpIHRoZW4NCgkJCQlDYXN0VyhtaW5pb24sIG1pbmlvbi54LCBtaW5pb24ueSkNCgkJCWVuZA0KCQllbmQNCgllbmQNCmVuZA0KDQpmdW5jdGlvbiBGYXJtUSgpDQoJZm9yIGksIG1pbmlvbiBpbiBwYWlycyhFbmVteU1pbmlvbnMub2JqZWN0cykgZG8NCgkJaWYgTWVudS5mYXJtLmZhcm1RIHRoZW4NCgkJCWxvY2FsIFFkbWcsIFdtZyA9IENhbGNTcGVsbERhbWFnZShtaW5pb24pDQoJCQlpZiBtaW5pb24gfj0gbmlsIGFuZCBub3QgbWluaW9uLmRlYWQgYW5kIG1pbmlvbi52aXNpYmxlIGFuZCBtaW5pb24uaGVhbHRoIDwgUWRtZyBhbmQgVmFsaWRUYXJnZXQobWluaW9uLCA2MjUpIHRoZW4NCgkJCQlDYXN0UShtaW5pb24pDQoJCQllbmQNCgkJZW5kDQoJZW5kDQplbmQNCg0KDQpmdW5jdGlvbiBKdW5nbGVTdGVhbENoZWNrUmVxdWlyZW1lbnRzKGxvY2FsTWluaW9uKQ0KCWlmIE1lbnUuanVuZ2xlLm9wdGlvbmFsLnVzZU9wdGlvbmFsIHRoZW4NCgkJbG9jYWwgZW5lbXlSZXF1aXJlbWVudCA9IGZhbHNlDQoJCWxvY2FsIGFsbHlSZXF1aXJlbWVudCA9IGZhbHNlDQoNCgkJaWYgTWVudS5qdW5nbGUub3B0aW9uYWwuZW5lbXlqdW5nbGVyIHRoZW4NCgkJCWlmICNlbmVteUp1bmdsZXJzID49IDEgdGhlbg0KCQkJCWZvciBpID0gMSwgI2VuZW15SnVuZ2xlcnMgZG8NCgkJCQkJbG9jYWwganVuZ2xlciA9IGVuZW15SnVuZ2xlcnNbaV0NCgkJCQkJaWYgR2V0RGlzdGFuY2UobG9jYWxNaW5pb24sIGp1bmdsZXIpIDwgTWVudS5qdW5nbGUub3B0aW9uYWwucmFuZ2VlbmVteWp1bmdsZXIgdGhlbg0KCQkJCQkJZW5lbXlSZXF1aXJlbWVudCA9IHRydWUNCgkJCQkJCWJyZWFrDQoJCQkJCWVuZA0KCQkJCWVuZA0KCQkJZW5kDQoJCWVuZA0KDQoJCWlmIE1lbnUuanVuZ2xlLm9wdGlvbmFsLmFsbHlqdW5nbGVyIHRoZW4NCgkJCWlmICNhbGx5SnVuZ2xlcnMgPj0gMSB0aGVuDQoJCQkJZm9yIGkgPSAxLCAjYWxseUp1bmdsZXJzIGRvDQoJCQkJCWxvY2FsIGp1bmdsZXIgPSBhbGx5SnVuZ2xlcnNbaV0NCgkJCQkJaWYgR2V0RGlzdGFuY2UobG9jYWxNaW5pb24sIGp1bmdsZXIpIDwgTWVudS5qdW5nbGUub3B0aW9uYWwucmFuZ2VhbGx5anVuZ2xlciB0aGVuDQoJCQkJCQlhbGx5UmVxdWlyZW1lbnQgPSB0cnVlDQoJCQkJCQlicmVhaw0KCQkJCQllbmQNCgkJCQllbmQNCgkJCWVuZA0KCQllbmQNCg0KCQlpZiBNZW51Lmp1bmdsZS5vcHRpb25hbC5lbmVteWp1bmdsZXIgYW5kIE1lbnUuanVuZ2xlLm9wdGlvbmFsLmFsbHlqdW5nbGVyIGFuZCBlbmVteVJlcXVpcmVtZW50IGFuZCBhbGx5UmVxdWlyZW1lbnQgdGhlbg0KCQkJcmV0dXJuIHRydWUNCgkJZWxzZWlmIE1lbnUuanVuZ2xlLm9wdGlvbmFsLmVuZW15anVuZ2xlciBhbmQgbm90IE1lbnUuanVuZ2xlLm9wdGlvbmFsLmFsbHlqdW5nbGVyIGFuZCBlbmVteVJlcXVpcmVtZW50IHRoZW4NCgkJCXJldHVybiB0cnVlDQoJCWVsc2VpZiBub3QgTWVudS5qdW5nbGUub3B0aW9uYWwuZW5lbXlqdW5nbGVyIGFuZCBNZW51Lmp1bmdsZS5vcHRpb25hbC5hbGx5anVuZ2xlciBhbmQgYWxseVJlcXVpcmVtZW50IHRoZW4NCgkJCXJldHVybiB0cnVlDQoJCWVuZA0KDQoJCXJldHVybiBmYWxzZQ0KCWVuZA0KDQoJcmV0dXJuIHRydWUNCmVuZA0KDQpmdW5jdGlvbiBKdW5nbGVTdGVhbCgpDQoJSnVuZ2xlTWluaW9uczp1cGRhdGUoKQ0KDQogCWZvciBpLCBtaW5pb24gaW4gaXBhaXJzKEp1bmdsZU1pbmlvbnMub2JqZWN0cykgZG8NCgkgCWlmIEdldERpc3RhbmNlKG1pbmlvbikgPCA2MDAgYW5kIEp1bmdsZVN0ZWFsQ2hlY2tSZXF1aXJlbWVudHMobWluaW9uKSB0aGVuDQoJIAkJbG9jYWwgUWRtZywgV2RtZywgUmRtZyA9IENhbGNTcGVsbERhbWFnZShtaW5pb24pDQoNCgkJIAlpZiBtaW5pb24uY2hhck5hbWUgPT0gbWluaW9uc1N0ZWFsWzFdIGFuZCBNZW51Lmp1bmdsZS5zdGVhbEJsdWUgYW5kIG1pbmlvbi5oZWFsdGggPCBRZG1nIGFuZCBub3QgbWluaW9uLmRlYWQgYW5kIG1pbmlvbi52aXNpYmxlIHRoZW4NCgkJIAkJQ2FzdFEobWluaW9uKQ0KCQkgCWVsc2VpZiBtaW5pb24uY2hhck5hbWUgPT0gbWluaW9uc1N0ZWFsWzJdIGFuZCBNZW51Lmp1bmdsZS5zdGVhbFJlZCBhbmQgbWluaW9uLmhlYWx0aCA8IFFkbWcgYW5kIG5vdCBtaW5pb24uZGVhZCBhbmQgbWluaW9uLnZpc2libGUgdGhlbg0KCQkgCQlDYXN0UShtaW5pb24pDQoJCSAJZWxzZWlmIG1pbmlvbi5jaGFyTmFtZSA9PSBtaW5pb25zU3RlYWxbNF0gYW5kIE1lbnUuanVuZ2xlLnN0ZWFsQmFyb24gdGhlbg0KCQkgCQlpZiBtaW5pb24uaGVhbHRoIDwgUWRtZyBhbmQgbm90IG1pbmlvbi5kZWFkIGFuZCBtaW5pb24udmlzaWJsZSB0aGVuDQoJCSAJCQlDYXN0UShtaW5pb24pDQoJCSAJCWVsc2VpZiBtaW5pb24uaGVhbHRoIDwgUWRtZyArIFJkbWcgYW5kIG5vdCBtaW5pb24uZGVhZCBhbmQgbWluaW9uLnZpc2libGUgdGhlbg0KCQkgCQkJQ2FzdFEobWluaW9uKQ0KCQkgCQkJQ2FzdFIobWluaW9uKQ0KCQkgCQllbmQNCgkJIAllbHNlaWYgbWluaW9uLmNoYXJOYW1lID09IG1pbmlvbnNTdGVhbFszXSBhbmQgTWVudS5qdW5nbGUuc3RlYWxEcmFnb24gdGhlbg0KCQkgCQlpZiBtaW5pb24uaGVhbHRoIDwgUWRtZyBhbmQgbm90IG1pbmlvbi5kZWFkIGFuZCBtaW5pb24udmlzaWJsZSB0aGVuDQoJCSAJCQlDYXN0UShtaW5pb24pDQoJCSAJCWVsc2VpZiBtaW5pb24uaGVhbHRoIDwgUWRtZyArIFJkbWcgYW5kIG5vdCBtaW5pb24uZGVhZCBhbmQgbWluaW9uLnZpc2libGUgdGhlbg0KCQkgCQkJQ2FzdFEobWluaW9uKQ0KCQkgCQkJQ2FzdFIobWluaW9uKQ0KCQkgCQllbmQNCgkJIAllbmQNCgkgCWVuZA0KIAllbmQNCmVuZA0KDQpmdW5jdGlvbiBaaG9ueWFzKCkNCglsb2NhbCB6U2xvdCA9IEdldEludmVudG9yeVNsb3RJdGVtKDMxNTcpDQoJaWYgelNsb3Qgfj0gbmlsIGFuZCBteUhlcm86Q2FuVXNlU3BlbGwoelNsb3QpID09IFJFQURZIHRoZW4NCgkJbG9jYWwgaGVhbHRoID0gbXlIZXJvLmhlYWx0aA0KCQlsb2NhbCBtYW5hID0gbXlIZXJvLm1hbmENCgkJbG9jYWwgbWF4SGVhbHRoID0gbXlIZXJvLm1heEhlYWx0aA0KCQlpZiAoaGVhbHRoIC8gbWF4SGVhbHRoKSA8PSBNZW51Lm1pc2Muemhvbnlhcy56aG9ueWFzdW5kZXIgdGhlbg0KCQkJQ2FzdFNwZWxsKHpTbG90KQ0KCQllbmQNCgllbmQNCmVuZA0KDQoNCmZ1bmN0aW9uIFNwZWxsQ2hlY2tzKCkNCglRcmVhZHkgPSAobXlIZXJvOkNhblVzZVNwZWxsKF9RKSA9PSBSRUFEWSkNCglXcmVhZHkgPSAobXlIZXJvOkNhblVzZVNwZWxsKF9XKSA9PSBSRUFEWSkNCglFcmVhZHkgPSAobXlIZXJvOkNhblVzZVNwZWxsKF9FKSA9PSBSRUFEWSkNCglScmVhZHkgPSAobXlIZXJvOkNhblVzZVNwZWxsKF9SKSA9PSBSRUFEWSkNCg0KCUhyZWFkeSA9IChoZWFsIH49IG5pbCBhbmQgbXlIZXJvOkNhblVzZVNwZWxsKGhlYWwpID09IFJFQURZKQ0KDQoJQnJlYWR5ID0gKGJhcnJpZXIgfj0gbmlsIGFuZCBteUhlcm86Q2FuVXNlU3BlbGwoYmFycmllcikgPT0gUkVBRFkpDQoNCglJcmVhZHkgPSAoaWduaXRlIH49IG5pbCBhbmQgbXlIZXJvOkNhblVzZVNwZWxsKGlnbml0ZSkgPT0gUkVBRFkpDQoNCglGcmVhZHkgPSAoZmxhc2ggfj0gbmlsIGFuZCBteUhlcm86Q2FuVXNlU3BlbGwoZmxhc2gpID09IFJFQURZKQ0KZW5kDQoNCmZ1bmN0aW9uIEZpbmRTdW1tb25lcnMoKQ0KCWlmIG15SGVybzpHZXRTcGVsbERhdGEoU1VNTU9ORVJfMSkubmFtZTpmaW5kKCJzdW1tb25lcmhlYWwiKSB0aGVuDQoJCWhlYWwgPSBTVU1NT05FUl8xDQogICAgZWxzZWlmIG15SGVybzpHZXRTcGVsbERhdGEoU1VNTU9ORVJfMikubmFtZTpmaW5kKCJzdW1tb25lcmhlYWwiKSB0aGVuDQogICAgCWhlYWwgPSBTVU1NT05FUl8yDQogICAgZW5kDQoNCiAgICBpZiBteUhlcm86R2V0U3BlbGxEYXRhKFNVTU1PTkVSXzEpLm5hbWU6ZmluZCgic3VtbW9uZXJkb3QiKSB0aGVuDQoJCWlnbml0ZSA9IFNVTU1PTkVSXzENCiAgICBlbHNlaWYgbXlIZXJvOkdldFNwZWxsRGF0YShTVU1NT05FUl8yKS5uYW1lOmZpbmQoInN1bW1vbmVyZG90IikgdGhlbg0KICAgIAlpZ25pdGUgPSBTVU1NT05FUl8yDQogICAgZW5kDQoNCiAgICBpZiBteUhlcm86R2V0U3BlbGxEYXRhKFNVTU1PTkVSXzEpLm5hbWU6ZmluZCgic3VtbW9uZXJiYXJyaWVyIikgdGhlbg0KCQliYXJyaWVyID0gU1VNTU9ORVJfMQ0KICAgIGVsc2VpZiBteUhlcm86R2V0U3BlbGxEYXRhKFNVTU1PTkVSXzIpLm5hbWU6ZmluZCgic3VtbW9uZXJiYXJyaWVyIikgdGhlbg0KICAgIAliYXJyaWVyID0gU1VNTU9ORVJfMg0KICAgIGVuZA0KDQogICAgaWYgbXlIZXJvOkdldFNwZWxsRGF0YShTVU1NT05FUl8xKS5uYW1lOmZpbmQoInN1bW1vbmVyZmxhc2giKSB0aGVuDQoJCWZsYXNoID0gU1VNTU9ORVJfMQ0KICAgIGVsc2VpZiBteUhlcm86R2V0U3BlbGxEYXRhKFNVTU1PTkVSXzIpLm5hbWU6ZmluZCgic3VtbW9uZXJmbGFzaCIpIHRoZW4NCiAgICAJZmxhc2ggPSBTVU1NT05FUl8yDQogICAgZW5kDQoNCmVuZA0KDQoNCmZ1bmN0aW9uIEtpbGxTdGVhbFByZWNpc2UoKQ0KCVNwZWxsQ2hlY2tzKCkNCg0KCWxvY2FsIHVzZVEgPSBNZW51LmF1dG9raWxsLnNwZWxscy5hdXRva2lsbFENCglsb2NhbCB1c2VXID0gTWVudS5hdXRva2lsbC5zcGVsbHMuYXV0b2tpbGxXDQoJbG9jYWwgdXNlUiA9IE1lbnUuYXV0b2tpbGwuc3BlbGxzLmF1dG9raWxsUg0KCWxvY2FsIHVzZUlnbml0ZSA9IE1lbnUuYXV0b2tpbGwuc3BlbGxzLmF1dG9raWxsSWduaXRlDQoJbG9jYWwgdXNlREZHID0gTWVudS5hdXRva2lsbC5zcGVsbHMuYXV0b2tpbGxERkcNCglsb2NhbCBERkdTbG90ID0gR2V0SW52ZW50b3J5U2xvdEl0ZW0oMzEyOCkNCglsb2NhbCBERkdyZWFkeSA9IChERkdTbG90IH49IG5pbCBhbmQgbXlIZXJvOkNhblVzZVNwZWxsKERGR1Nsb3QpID09IFJFQURZKQ0KCWxvY2FsIFFtYW5hID0gbXlIZXJvOkdldFNwZWxsRGF0YShfUSkubWFuYQ0KCWxvY2FsIFdtYW5hID0gbXlIZXJvOkdldFNwZWxsRGF0YShfVykubWFuYQ0KCWxvY2FsIFJtYW5hID0gbXlIZXJvOkdldFNwZWxsRGF0YShfUikubWFuYQ0KDQoJb3B0aW9uYWxSYW5nZSA9ICgoTWVudS5hdXRva2lsbC5vcHRpb25hbC51c2VPcHRpb25hbCBhbmQgQ291bnRFbmVteUhlcm9JblJhbmdlKE1lbnUuYXV0b2tpbGwub3B0aW9uYWwucmFuZ2UpIDw9IE1lbnUuYXV0b2tpbGwub3B0aW9uYWwuZW5lbWllc25lYXJieSBhbmQgTWVudS5hdXRva2lsbC5vcHRpb25hbC5yYW5nZSkgb3IgNTc1KQ0KDQoJZm9yIGksIGVuZW15IGluIGlwYWlycyhHZXRFbmVteUhlcm9lcygpKSBkbw0KCQlpZiBNZW51LmF1dG9raWxsLmVuZW1pZXNbZW5lbXkuY2hhck5hbWVdIGFuZCBWYWxpZFRhcmdldChlbmVteSwgb3B0aW9uYWxSYW5nZSkgdGhlbg0KDQoJCQlsb2NhbCBRZG1nLCBXZG1nLCBSZG1nID0gQ2FsY1NwZWxsRGFtYWdlKGVuZW15KQ0KDQoJCQlRZG1nID0gKCh1c2VRIGFuZCBRcmVhZHkgYW5kIFFkbWcpIG9yIDApDQoJCQlXZG1nID0gKCh1c2VXIGFuZCBXcmVhZHkgYW5kIFdkbWcpIG9yIDApDQoJCQlSZG1nID0gKCh1c2VSIGFuZCBScmVhZHkgYW5kIG5vdCBIYXZlQnVmZihteUhlcm8sICJpbmZlcm5hbGd1YXJkaWFudGltZXIiKSBhbmQgUmRtZykgb3IgMCkNCgkJCWlEbWcgPSAoKHVzZUlnbml0ZSBhbmQgSXJlYWR5IGFuZCBnZXREbWcoIklHTklURSIsIGVuZW15LCBteUhlcm8pKSBvciAwKQ0KCQkJREZHZG1nID0gKCh1c2VERkcgYW5kIERGR3JlYWR5IGFuZCBnZXREbWcoIkRGRyIsIGVuZW15LCBteUhlcm8pKSBvciAwKQ0KDQoJCQlsb2NhbCBRREZHZG1nID0gMA0KCQkJbG9jYWwgV0RGR2RtZyA9IDANCgkJCWxvY2FsIFJERkdkbWcgPSAwDQoNCgkJCWlmIERGR2RtZyA+IDAgdGhlbg0KCQkJCVFERkdkbWcgPSBRZG1nICogMS4yDQoJCQkJV0RGR2RtZyA9IFdkbWcgKiAxLjINCgkJCQlSREZHZG1nID0gUmRtZyAqIDEuMg0KCQkJZW5kDQoNCg0KCQkJaWYgREZHZG1nID4gZW5lbXkuaGVhbHRoIHRoZW4NCgkJCQlDYXN0U3BlbGwoREZHU2xvdCwgZW5lbXkpDQoJCQllbHNlaWYgaURtZyA+IGVuZW15LmhlYWx0aCB0aGVuDQoJCQkJQ2FzdFNwZWxsKGlnbml0ZSwgZW5lbXkpDQoJCQllbHNlaWYgV2RtZyA+IFFkbWcgYW5kIFFkbWcgPiBlbmVteS5oZWFsdGggYW5kIG15SGVyby5tYW5hID4gUW1hbmEgdGhlbg0KCQkJCUNhc3RRKGVuZW15KQ0KCQkJZWxzZWlmIFdkbWcgPiBlbmVteS5oZWFsdGggYW5kIG15SGVyby5tYW5hID4gV21hbmEgdGhlbg0KCQkJCUNhc3RXKGVuZW15KQ0KCQkJZWxzZWlmIFdkbWcgPiBRZG1nIGFuZCBRREZHZG1nICsgREZHZG1nID4gZW5lbXkuaGVhbHRoIGFuZCBteUhlcm8ubWFuYSA+IFFtYW5hIHRoZW4NCgkJCQlDYXN0U3BlbGwoREZHU2xvdCwgZW5lbXkpDQoJCQkJQ2FzdFEoZW5lbXkpDQoJCQllbHNlaWYgV0RGR2RtZyArIERGR2RtZyA+IGVuZW15LmhlYWx0aCBhbmQgbXlIZXJvLm1hbmEgPiBXbWFuYSB0aGVuDQoJCQkJQ2FzdFNwZWxsKERGR1Nsb3QsIGVuZW15KQ0KCQkJCUNhc3RXKGVuZW15KQ0KCQkJZWxzZWlmIFdkbWcgPiBRZG1nIGFuZCBRREZHZG1nICsgREZHZG1nICsgaURtZyA+IGVuZW15LmhlYWx0aCBhbmQgbXlIZXJvLm1hbmEgPiBRbWFuYSB0aGVuDQoJCQkJQ2FzdFNwZWxsKERGR1Nsb3QsIGVuZW15KQ0KCQkJCUNhc3RRKGVuZW15KQ0KCQkJCUNhc3RTcGVsbChpZ25pdGUsIGVuZW15KQ0KCQkJZWxzZWlmIFdERkdkbWcgKyBERkdkbWcgKyBpRG1nID4gZW5lbXkuaGVhbHRoIGFuZCBteUhlcm8ubWFuYSA+IFdtYW5hIHRoZW4NCgkJCQlDYXN0U3BlbGwoREZHU2xvdCwgZW5lbXkpDQoJCQkJQ2FzdFcoZW5lbXkpDQoJCQkJQ2FzdFNwZWxsKGlnbml0ZSwgZW5lbXkpDQoJCQllbHNlaWYgUWRtZyArIFJkbWcgPiBlbmVteS5oZWFsdGggYW5kIG15SGVyby5tYW5hID4gUW1hbmEgKyBSbWFuYSB0aGVuDQoJCQkJQ2FzdFEoZW5lbXkpDQoJCQkJQ2FzdFIoZW5lbXkpDQoJCQllbHNlaWYgV2RtZyArIFJkbWcgPiBlbmVteS5oZWFsdGggYW5kIG15SGVyby5tYW5hID4gV21hbmEgKyBSbWFuYSB0aGVuDQoJCQkJQ2FzdFcoZW5lbXkpDQoJCQkJQ2FzdFIoZW5lbXkpDQoJCQllbHNlaWYgUURGR2RtZyArIFJERkdkbWcgKyBERkdkbWcgPiBlbmVteS5oZWFsdGggYW5kIG15SGVyby5tYW5hID4gUW1hbmEgKyBSbWFuYSB0aGVuDQoJCQkJQ2FzdFNwZWxsKERGR1Nsb3QsIGVuZW15KQ0KCQkJCUNhc3RRKGVuZW15KQ0KCQkJCUNhc3RSKGVuZW15KQ0KCQkJZWxzZWlmIFdERkdkbWcgKyBSREZHZG1nICsgREZHZG1nID4gZW5lbXkuaGVhbHRoIGFuZCBteUhlcm8ubWFuYSA+IFdtYW5hICsgUm1hbmEgdGhlbg0KCQkJCUNhc3RTcGVsbChERkdTbG90LCBlbmVteSkNCgkJCQlDYXN0VyhlbmVteSkNCgkJCQlDYXN0UihlbmVteSkNCgkJCWVsc2VpZiBRZG1nICsgUmRtZyArIGlEbWcgPiBlbmVteS5oZWFsdGggYW5kIG15SGVyby5tYW5hID4gUW1hbmEgKyBSbWFuYSB0aGVuDQoJCQkJQ2FzdFEoZW5lbXkpDQoJCQkJQ2FzdFIoZW5lbXkpDQoJCQkJQ2FzdFNwZWxsKGlnbml0ZSwgZW5lbXkpDQoJCQllbHNlaWYgV2RtZyArIFJkbWcgKyBpRG1nID4gZW5lbXkuaGVhbHRoIGFuZCBteUhlcm8ubWFuYSA+IFdtYW5hICsgUm1hbmEgdGhlbg0KCQkJCUNhc3RXKGVuZW15KQ0KCQkJCUNhc3RSKGVuZW15KQ0KCQkJCUNhc3RTcGVsbChpZ25pdGUsIGVuZW15KQ0KCQkJZWxzZWlmIFFERkdkbWcgKyBSREZHZG1nICsgREZHZG1nICsgaURtZyA+IGVuZW15LmhlYWx0aCBhbmQgbXlIZXJvLm1hbmEgPiBRbWFuYSArIFJtYW5hIHRoZW4NCgkJCQlDYXN0U3BlbGwoREZHU2xvdCwgZW5lbXkpDQoJCQkJQ2FzdFEoZW5lbXkpDQoJCQkJQ2FzdFIoZW5lbXkpDQoJCQkJQ2FzdFNwZWxsKGlnbml0ZSwgZW5lbXkpDQoJCQllbHNlaWYgV0RGR2RtZyArIFJERkdkbWcgKyBERkdkbWcgKyBpRG1nID4gZW5lbXkuaGVhbHRoIGFuZCBteUhlcm8ubWFuYSA+IFdtYW5hICsgUm1hbmEgdGhlbg0KCQkJCUNhc3RTcGVsbChERkdTbG90LCBlbmVteSkNCgkJCQlDYXN0VyhlbmVteSkNCgkJCQlDYXN0UihlbmVteSkNCgkJCQlDYXN0U3BlbGwoaWduaXRlLCBlbmVteSkNCgkJCWVsc2VpZiBRZG1nICsgV2RtZyArIFJkbWcgPiBlbmVteS5oZWFsdGggYW5kIG15SGVyby5tYW5hID4gUW1hbmEgKyBSbWFuYSArIFdtYW5hIHRoZW4NCgkJCQlDYXN0UShlbmVteSkNCgkJCQlDYXN0VyhlbmVteSkNCgkJCQlDYXN0UihlbmVteSkNCgkJCWVsc2VpZiBRREZHZG1nICsgV0RGR2RtZyArIFJERkdkbWcgKyBERkdkbWcgPiBlbmVteS5oZWFsdGggYW5kIG15SGVyby5tYW5hID4gUW1hbmEgKyBSbWFuYSArIFdtYW5hIHRoZW4NCgkJCQlDYXN0U3BlbGwoREZHU2xvdCwgZW5lbXkpDQoJCQkJQ2FzdFEoZW5lbXkpDQoJCQkJQ2FzdFcoZW5lbXkpDQoJCQkJQ2FzdFIoZW5lbXkpDQoJCQllbHNlaWYgUURGR2RtZyArIFdERkdkbWcgKyBSREZHZG1nICsgREZHZG1nICsgaURtZyA+IGVuZW15LmhlYWx0aCBhbmQgbXlIZXJvLm1hbmEgPiBRbWFuYSArIFJtYW5hICsgV21hbmEgdGhlbg0KCQkJCUNhc3RTcGVsbChERkdTbG90LCBlbmVteSkNCgkJCQlDYXN0UShlbmVteSkNCgkJCQlDYXN0VyhlbmVteSkNCgkJCQlDYXN0UihlbmVteSkNCgkJCQlDYXN0U3BlbGwoaWduaXRlLCBlbmVteSkNCgkJCWVuZA0KCQllbmQNCgllbmQNCmVuZA0KDQpmdW5jdGlvbiBSZXR1cm5CZXN0VWx0VGFyZ2V0KGFtb3VudE9mVGFyZ2V0cywgZmxhc2hUcnVlKQ0KCWxvY2FsIHRhcmcgPSBuaWwNCglsb2NhbCByYW5nZSA9ICgoZmxhc2hUcnVlIGFuZCAxMDAwKSBvciA1NzUpDQoNCglmb3IgaSwgZW5lbXkgaW4gaXBhaXJzKEdldEVuZW15SGVyb2VzKCkpIGRvDQoJCWlmIEdldERpc3RhbmNlKGVuZW15LCBteUhlcm8pIDw9IHJhbmdlIHRoZW4NCgkJCWxvY2FsIGNvdW50ID0gMQ0KCQkJZm9yIGksIFRlbmVteSBpbiBpcGFpcnMoR2V0RW5lbXlIZXJvZXMoKSkgZG8NCgkJCQlpZiBlbmVteSB+PSBUZW5lbXkgdGhlbg0KCQkJCQlpZiBHZXREaXN0YW5jZShUZW5lbXksIGVuZW15KSA8IDE1MCB0aGVuDQoJCQkJCQljb3VudCA9IGNvdW50ICsgMQ0KCQkJCQllbmQNCgkJCQllbmQNCgkJCWVuZA0KDQoJCQlpZiBjb3VudCA+PSBhbW91bnRPZlRhcmdldHMgYW5kIE1lbnUuYXV0b1IudXNlUltlbmVteS5jaGFyTmFtZV0gdGhlbg0KCQkJCXRhcmcgPSBlbmVteQ0KCQkJCWJyZWFrDQoJCQllbmQNCgkJZW5kDQoJZW5kDQoJcmV0dXJuIHRhcmcNCmVuZA0KDQpmdW5jdGlvbiBEcmF3S2lsbGFibGUoKQ0KCWZvciBpID0gMSwgaGVyb01hbmFnZXIuaUNvdW50LCAxIGRvDQoJCWxvY2FsIGVuZW15ID0gaGVyb01hbmFnZXI6Z2V0SGVybyhpKQ0KCQlpZiBWYWxpZFRhcmdldChlbmVteSkgdGhlbg0KCQkJaWYgZW5lbXkudGVhbSB+PSBteUhlcm8udGVhbSB0aGVuDQoJCQkJbG9jYWwgREZHU2xvdCA9IEdldEludmVudG9yeVNsb3RJdGVtKDMxMjgpDQoJCQkJbG9jYWwgREZHcmVhZHkgPSAoREZHU2xvdCB+PSBuaWwgYW5kIG15SGVybzpDYW5Vc2VTcGVsbChERkdTbG90KSA9PSBSRUFEWSkNCg0KCQkJCURGR2RtZyA9ICgoKE1lbnUuY29tYm8uY29tYm9ERkcgb3IgTWVudS5hdXRva2lsbC5zcGVsbHMuYXV0b2tpbGxERkcpIGFuZCBERkdyZWFkeSBhbmQgZ2V0RG1nKCJERkciLCBlbmVteSwgbXlIZXJvKSkgb3IgMCkNCg0KCQkJCWlEbWcgPSAoKGlnbml0ZSB+PSBuaWwgYW5kIElyZWFkeSBhbmQgZ2V0RG1nKCJJR05JVEUiLCBlbmVteSwgbXlIZXJvKSkgb3IgMCkNCg0KCQkJCWxvY2FsIFFkbWcsIFdkbWcsIFJkbWcgPSBDYWxjU3BlbGxEYW1hZ2UoZW5lbXkpDQoJCQkJUWRtZyA9ICgoUXJlYWR5IGFuZCBRZG1nKSBvciAwKQ0KCQkJCVdkbWcgPSAoKFdyZWFkeSBhbmQgV2RtZykgb3IgMCkNCgkJCQlSZG1nID0gKChScmVhZHkgYW5kIG5vdCBIYXZlQnVmZihteUhlcm8sICJpbmZlcm5hbGd1YXJkaWFudGltZXIiKSBhbmQgUmRtZykgb3IgMCkNCg0KCQkJCWxvY2FsIFFERkdkbWcsIFdERkdkbWcsIFJERkdkbWcgPSAwLCAwLCAwDQoNCgkJCQlpZiBERkdkbWcgPiAwIHRoZW4NCgkJCQkJUURGR2RtZyA9IFFkbWcgKiAxLjINCgkJCQkJV0RGR2RtZyA9IFdkbWcgKiAxLjINCgkJCQkJUkRGR2RtZyA9IFJkbWcgKiAxLjINCgkJCQllbmQNCg0KICAgICAgICAgICAgICAgIGlmIERGR2RtZyA+IGVuZW15LmhlYWx0aCB0aGVuDQogICAgICAgICAgICAgICAgCUtpbGxUZXh0W2ldID0gMQ0KICAgICAgICAgICAgICAgIGVsc2VpZiBpRG1nID4gZW5lbXkuaGVhbHRoIHRoZW4NCiAgICAgICAgICAgICAgICAJS2lsbFRleHRbaV0gPSAyDQoJCQkJZWxzZWlmIFFkbWcgPiBlbmVteS5oZWFsdGggdGhlbg0KCQkJCQlLaWxsVGV4dFtpXSA9IDMNCgkJCQllbHNlaWYgUURGR2RtZyArIERGR2RtZyA+IGVuZW15LmhlYWx0aCB0aGVuDQoJCQkJCUtpbGxUZXh0W2ldID0gNA0KCQkJCWVsc2VpZiBRZG1nICsgaURtZyA+IGVuZW15LmhlYWx0aCB0aGVuDQoJCQkJCUtpbGxUZXh0W2ldID0gNQ0KCQkJCWVsc2VpZiBRZG1nICsgaURtZyArIERGR2RtZyA+IGVuZW15LmhlYWx0aCB0aGVuDQoJCQkJCUtpbGxUZXh0W2ldID0gNg0KCQkJCWVsc2VpZiBRZG1nICsgV2RtZyA+IGVuZW15LmhlYWx0aCB0aGVuDQoJCQkJCUtpbGxUZXh0W2ldID0gNw0KCQkJCWVsc2VpZiBRREZHZG1nICsgV0RGR2RtZyArIERGR2RtZyA+IGVuZW15LmhlYWx0aCB0aGVuDQoJCQkJCUtpbGxUZXh0W2ldID0gOA0KCQkJCWVsc2VpZiBRZG1nICsgV2RtZyArIGlEbWcgPiBlbmVteS5oZWFsdGggdGhlbg0KCQkJCQlLaWxsVGV4dFtpXSA9IDkNCgkJCQllbHNlaWYgUURGR2RtZyArIFdERkdkbWcgKyBpRG1nICsgREZHZG1nID4gZW5lbXkuaGVhbHRoIHRoZW4NCgkJCQkJS2lsbFRleHRbaV0gPSAxMA0KCQkJCWVsc2VpZiBRZG1nICsgV2RtZyArIFJkbWcgPiBlbmVteS5oZWFsdGggdGhlbg0KCQkJCQlLaWxsVGV4dFtpXSA9IDExDQoJCQkJZWxzZWlmIERGR2RtZyArIFFERkdkbWcgKyBXREZHZG1nICsgUkRGR2RtZyA+IGVuZW15LmhlYWx0aCB0aGVuDQoJCQkJCUtpbGxUZXh0W2ldID0gMTINCgkJCQllbHNlaWYgUWRtZyArIFdkbWcgKyBSZG1nICsgaURtZyA+IGVuZW15LmhlYWx0aCB0aGVuDQoJCQkJCUtpbGxUZXh0W2ldID0gMTMNCgkJCQllbHNlaWYgUURGR2RtZyArIFdERkdkbWcgKyBSREZHZG1nICsgaURtZyArIERGR2RtZyA+IGVuZW15LmhlYWx0aCB0aGVuDQoJCQkJCUtpbGxUZXh0W2ldID0gMTQNCgkJCQllbHNlDQoJCQkJCUtpbGxUZXh0W2ldID0gMTUNCgkJCQllbmQNCgkJCWVuZA0KCQllbmQNCgllbmQNCmVuZA0KDQpmdW5jdGlvbiBIYXZlQnVmZih1bml0LGJ1ZmZuYW1lKQ0KCWxvY2FsIHJlc3VsdCA9IGZhbHNlDQoJZm9yIGkgPSAxLCB1bml0LmJ1ZmZDb3VudCwgMSBkbw0KCQlpZiB1bml0OmdldEJ1ZmYoaSkgfj0gbmlsIGFuZCB1bml0OmdldEJ1ZmYoaSkubmFtZSA9PSBidWZmbmFtZSBhbmQgdW5pdDpnZXRCdWZmKGkpLnZhbGlkIGFuZCBCdWZmSXNWYWxpZCh1bml0OmdldEJ1ZmYoaSkpIHRoZW4NCgkJCXJlc3VsdCA9IHRydWUNCgkJCWJyZWFrDQoJCWVuZA0KCWVuZA0KCXJldHVybiByZXN1bHQNCmVuZA0KDQpmdW5jdGlvbiBPbkNyZWF0ZU9iaihvYmplY3QpDQogICAgaWYgb2JqZWN0Lm5hbWUgPT0gIlN0dW5SZWFkeS50cm95IiBhbmQgR2V0RGlzdGFuY2Uob2JqZWN0LCBteUhlcm8pIDwgNTAgdGhlbg0KICAgICAgICBjYW5TdHVuID0gdHJ1ZQ0KICAgIGVuZA0KDQogICAgaWYgb2JqZWN0Lm5hbWUgPT0gIlRlbGVwb3J0SG9tZS50cm95IiBhbmQgR2V0RGlzdGFuY2Uob2JqZWN0LCBteUhlcm8pIDwgNTAgdGhlbg0KICAgIAlpc1JlY2FsbGluZyA9IHRydWUNCiAgICBlbmQNCg0KDQplbmQNCg0KDQpmdW5jdGlvbiBPbkRlbGV0ZU9iaihvYmplY3QpDQogICAgaWYgb2JqZWN0Lm5hbWUgPT0gIlN0dW5SZWFkeS50cm95IiBhbmQgR2V0RGlzdGFuY2Uob2JqZWN0LCBteUhlcm8pIDwgNTAgdGhlbg0KICAgICAgICBjYW5TdHVuID0gZmFsc2UNCiAgICBlbmQNCg0KICAgIGlmIG9iamVjdC5uYW1lID09ICJUZWxlcG9ydEhvbWUudHJveSIgYW5kIEdldERpc3RhbmNlKG9iamVjdCwgbXlIZXJvKSA8IDUwIHRoZW4NCiAgICAJaXNSZWNhbGxpbmcgPSBmYWxzZQ0KICAgIGVuZA0KZW5kDQoNCg0KZnVuY3Rpb24gT25HYWluQnVmZih1bml0LCBidWZmKQ0KCWlmIHVuaXQuaXNNZSBhbmQgKGJ1ZmYubmFtZSA9PSAicHlyb21hbmlhIikgdGhlbg0KCQlwYXNzaXZlU3RhY2tzID0gMQ0KCWVuZA0KDQoJaWYgdW5pdC5pc01lIGFuZCAoYnVmZi5uYW1lID09ICJpbmZlcm5hbGd1YXJkaWFudGltZXIiKSB0aGVuDQoJCWhhc1RpYmJlcnMgPSB0cnVlDQoJZW5kDQoNCglpZiB1bml0LmlzbWUgYW5kIChidWZmLm5hbWUgPT0gIlJlZ2VuZXJhdGlvblBvdGlvbiIpIHRoZW4NCgkJaGVhbHRoUG90ID0gdHJ1ZQ0KCWVuZA0KDQoJaWYgdW5pdC5pc01lIGFuZCAoYnVmZi5uYW1lID09ICJGbGFza09mQ3J5c3RhbFdhdGVyIikgdGhlbg0KCQltYW5hUG90ID0gdHJ1ZQ0KCWVuZA0KDQplbmQNCg0KZnVuY3Rpb24gT25VcGRhdGVCdWZmKHVuaXQsIGJ1ZmYpDQoJaWYgdW5pdC5pc01lIGFuZCAoYnVmZi5uYW1lID09ICJweXJvbWFuaWEiKSB0aGVuDQoJCXBhc3NpdmVTdGFja3MgPSBwYXNzaXZlU3RhY2tzICsgMQ0KCWVuZA0KZW5kDQoNCmZ1bmN0aW9uIE9uTG9zZUJ1ZmYodW5pdCwgYnVmZikNCglpZiB1bml0LmlzTWUgYW5kIChidWZmLm5hbWUgPT0gInB5cm9tYW5pYV9wYXJ0aWNsZSIpIHRoZW4NCgkJcGFzc2l2ZVN0YWNrcyA9IDANCgllbmQNCglpZiB1bml0LmlzTWUgYW5kIChidWZmLm5hbWUgPT0gImluZmVybmFsZ3VhcmRpYW50aW1lciIpIHRoZW4NCgkJaGFzVGliYmVycyA9IGZhbHNlDQoJZW5kDQoJaWYgdW5pdC5pc21lIGFuZCAoYnVmZi5uYW1lID09ICJSZWdlbmVyYXRpb25Qb3Rpb24iKSB0aGVuDQoJCWhlYWx0aFBvdCA9IGZhbHNlDQoJZW5kDQoJaWYgdW5pdC5pc01lIGFuZCAoYnVmZi5uYW1lID09ICJGbGFza09mQ3J5c3RhbFdhdGVyIikgdGhlbg0KCQltYW5hUG90ID0gZmFsc2UNCgllbmQNCg0KZW5kDQoNCg0KZnVuY3Rpb24gT25Qcm9jZXNzU3BlbGwob2JqZWN0LCBzcGVsbCkNCiAgCWlmIChzcGVsbC50YXJnZXQgPT0gbXlIZXJvIGFuZCBzdHJpbmcuZmluZChzcGVsbC5uYW1lLCAiQmFzaWNBdHRhY2siKSkgYW5kIG9iamVjdC50eXBlID09ICJPYmpfQUlfSGVybyIgYW5kIE1lbnUubWlzYy5Fc2V0dGluZ3MudXNlRW9uQXR0YWNrIHRoZW4NCiAgIAkgCUNhc3RTcGVsbChfRSkNCiAgCWVuZA0KDQogIAlpZiAoc3BlbGwubmFtZSA9PSAiWmVkVWx0IiBhbmQgc3BlbGwudGFyZ2V0LmlzTWUpIGFuZCBNZW51Lm1pc2Muemhvbnlhcy56aG9ueWFzIHRoZW4NCiAgIAkJbG9jYWwgaGVhbHRoID0gbXloZXJvLmhlYWx0aA0KICAgCQlsb2NhbCBhZCA9IG9iamVjdC5kYW1hZ2U7DQogICAJCWxvY2FsIHBlcmNlbnRhZ2UgPSAyMA0KCQlpZiBzcGVsbC5sZXZlbCA9PSAxIHRoZW4NCgkJCXBlcmNlbnRhZ2UgPSAyMA0KCQllbHNlaWYgc3BlbGwubGV2ZWwgPT0gMiB0aGVuDQoJCQlwZXJjZW50YWdlID0gMzUNCgkJZWxzZWlmIHNwZWxsLmxldmVsID09IDMgdGhlbg0KCQkJcGVyY2VudGFnZSA9IDIwDQoJCWVuZA0KCQlEZWxheUFjdGlvbihmdW5jdGlvbihoZWFsdGgsIGFkLCBwZXJjZW50YWdlKQ0KCQkJaWYgbXlIZXJvLmRlYWQgdGhlbiByZXR1cm4gZW5kDQoJCQkgIGxvY2FsIGRhbWFnZURlYWx0aCA9IGhlYWx0aCAtIG15SGVyby5oZWFsdGgNCgkJCSAgbG9jYWwgdG90YWxEYW1hZ2UgPSAoKGRhbWFnZURlYWx0aCAvIDEwMCkgKiBwZXJjZW50YWdlKSArIGFkDQoJCQkgIGlmIHRvdGFsRGFtYWdlID4gbXlIZXJvLmhlYWx0aCB0aGVuDQoJCQkgIAlsb2NhbCB6U2xvdCA9IEdldEludmVudG9yeVNsb3RJdGVtKDMxNTcpDQoJCQkgICAJaWYgelNsb3Qgfj0gbmlsIGFuZCBteUhlcm86Q2FuVXNlU3BlbGwoelNsb3QpID09IFJFQURZIHRoZW4NCgkJCQkJQ2FzdEl0ZW0oMzE1NykNCgkJCQllbmQNCgkJCWVuZA0KICAgCQllbmQsIDMsIHtoZWFsdGgsIGFkLCBwZXJjZW50YWdlfSkNCgllbmQNCg0KDQogIAlpZiBzcGVsbC5uYW1lID09ICJLYXJ0aHVzRmFsbGVuT25lIiBhbmQgb2JqZWN0LnRlYW0gfj0gbXlIZXJvLnRlYW0gYW5kIE1lbnUubWlzYy56aG9ueWFzLnpob255YXMgdGhlbg0KICAJCWxvY2FsIGthcnRodXNSZG1nID0gZ2V0RG1nKCJSIiwgbXlIZXJvLCBvYmplY3QpDQogIAkJaWYga2FydGh1c1JkbWcgPiBteUhlcm8uaGVhbHRoIGFuZCBub3QgbXlIZXJvLmRlYWQgdGhlbg0KICAJCQlsb2NhbCB6U2xvdCA9IEdldEludmVudG9yeVNsb3RJdGVtKDMxNTcpDQogIAkJCWlmIHpTbG90IH49IG5pbCBhbmQgbXlIZXJvOkNhblVzZVNwZWxsKHpTbG90KSA9PSBSRUFEWSB0aGVuDQoJCQkJRGVsYXlBY3Rpb24oZnVuY3Rpb24oKSBDYXN0U3BlbGwoelNsb3QpIGVuZCwgMikNCgkJCWVuZA0KICAJCWVuZA0KICAJZW5kDQplbmQNCg0KDQpmdW5jdGlvbiBEcmlua1BvdGlvbnMoKQ0KCWhlYWx0aCA9IG15SGVyby5oZWFsdGgNCgltYW5hID0gbXlIZXJvLm1hbmENCgltYXhIZWFsdGggPSBteUhlcm8ubWF4SGVhbHRoDQoJbWF4TWFuYSA9IG15SGVyby5tYXhNYW5hDQoNCglEcmlua0hlYWx0aChoZWFsdGgsIG1heEhlYWx0aCkNCglEcmlua01hbmEobWFuYSwgbWF4TWFuYSkNCmVuZA0KDQpmdW5jdGlvbiBEcmlua0hlYWx0aChoLCBtSCkNCglpZiBoZWFsdGhQb3QgPT0gdHJ1ZSB0aGVuIHJldHVybiBlbmQNCglsb2NhbCBoU2xvdCA9IEdldEludmVudG9yeVNsb3RJdGVtKDIwMDMpDQoJaWYgaFNsb3Qgfj0gbmlsIHRoZW4NCgkJaWYgKGggLyBtSCA8PSBNZW51Lm1pc2MuYXV0b3BvdGlvbnMuaGVhbHRoKSB0aGVuDQoJCQlDYXN0U3BlbGwoaFNsb3QpDQoJCWVuZA0KCWVuZA0KZW5kDQoNCmZ1bmN0aW9uIERyaW5rTWFuYShtLCBtTSkNCglpZiBoZWFsdGhQb3QgPT0gdHJ1ZSB0aGVuIHJldHVybiBlbmQNCglsb2NhbCBtU2xvdCA9IEdldEludmVudG9yeVNsb3RJdGVtKDIwMDQpDQoJaWYgbVNsb3Qgfj0gbmlsIHRoZW4NCgkJaWYgKG0gLyBtTSA8PSBNZW51Lm1pc2MuYXV0b3BvdGlvbnMubWFuYSkgdGhlbg0KCQkJQ2FzdFNwZWxsKG1TbG90KQ0KCQllbmQNCgllbmQNCmVuZA0KDQpmdW5jdGlvbiBVc2VIZWFsKCkNCgloZWFsdGggPSBteUhlcm8uaGVhbHRoDQoJbWF4SGVhbHRoID0gbXlIZXJvLm1heEhlYWx0aA0KDQoJaWYgSHJlYWR5IHRoZW4NCgkJaWYgKChoZWFsdGggLyBtYXhIZWFsdGgpIDw9IE1lbnUubWlzYy5hdXRvaGVhbC5hbW91bnRPZkhlYWx0aCkgdGhlbg0KCQkJQ2FzdFNwZWxsKGhlYWwpDQoJCWVuZA0KCWVuZA0KDQoJaWYgTWVudS5taXNjLmF1dG9oZWFsLmhlbHBIZWFsIHRoZW4NCgkJZm9yIGksIHRlYW1tYXRlIGluIGlwYWlycyhHZXRBbGx5SGVyb2VzKCkpIGRvDQoJCQlpZiBHZXREaXN0YW5jZSh0ZWFtbWF0ZSwgbXlIZXJvKSA8PSA3MDAgdGhlbg0KCQkJCWhlYWx0aCA9IHRlYW1tYXRlLmhlYWx0aA0KCQkJCW1heEhlYWx0aCA9IHRlYW1tYXRlLm1heEhlYWx0aA0KDQoJCQkJaWYgKChoZWFsdGggLyBtYXhIZWFsdGgpIDw9IE1lbnUubWlzYy5hdXRvaGVhbC5hbW91bnRPZkhlYWx0aCkgdGhlbg0KCQkJCQlpZiBIcmVhZHkgdGhlbg0KCQkJCQkJQ2FzdFNwZWxsKGhlYWwpDQoJCQkJCWVuZA0KCQkJCWVuZA0KCQkJZW5kDQoJCWVuZA0KCWVuZA0KZW5kDQoNCmZ1bmN0aW9uIFVzZUlnbml0ZSgpDQoJbG9jYWwgaURtZyA9ICg1MCArICgyMCAqIG15SGVyby5sZXZlbCkpDQoJZm9yIGksIGVuZW15IGluIGlwYWlycyhHZXRFbmVteUhlcm9lcygpKSBkbw0KCQlpZiBHZXREaXN0YW5jZShlbmVteSwgbXlIZXJvKSA8IDYwMCBhbmQgVmFsaWRUYXJnZXQoZW5lbXksIDYwMCkgYW5kIE1lbnUubWlzYy5hdXRvaWduaXRlW2VuZW15LmNoYXJOYW1lXSB0aGVuDQoJCQlpZiBJcmVhZHkgdGhlbg0KCQkJCWlmIGVuZW15LmhlYWx0aCA8IGlEbWcgdGhlbg0KCQkJCQlDYXN0U3BlbGwoaWduaXRlLCBlbmVteSkNCgkJCQllbmQNCgkJCWVuZA0KCQllbmQNCgllbmQNCmVuZA0KDQoNCmZ1bmN0aW9uIFVzZUJhcnJpZXIoKQ0KCWhlYWx0aCA9IG15SGVyby5oZWFsdGgNCgltYXhIZWFsdGggPSBteUhlcm8ubWF4SGVhbHRoDQoNCglpZiBCcmVhZHkgdGhlbg0KCQlpZiAoKGhlYWx0aCAvIG1heEhlYWx0aCkgPD0gTWVudS5taXNjLmF1dG9iYXJyaWVyLmFtb3VudE9mSGVhbHRoKSB0aGVuDQoJCQlDYXN0U3BlbGwoYmFycmllcikNCgkJZW5kDQoJZW5kDQplbmQNCg0KDQpmdW5jdGlvbiBNYW5hTWFuYWdlcigpDQoJbWFuYSA9IG15SGVyby5tYW5hDQoJaWYgKG1hbmEgLyBteUhlcm8ubWF4TWFuYSA8PSBNZW51LmhhcmFzcy5oYXJhc3NNYW5hKSB0aGVuDQoJCXJldHVybiBmYWxzZQ0KCWVuZA0KCXJldHVybiB0cnVlDQplbmQNCg0KLS1bWyBUZW1wb3JhcnkgZGlzYWJsZWQNCmZ1bmN0aW9uIEF1dG9MZXZlbCgpDQoJaWYgTWVudS5taXNjLmF1dG9sZXZlbC5sZXZlbEF1dG8gPT0gMSBvciBteUhlcm8ubGV2ZWwgPD0gbGFzdExldmVsIHRoZW4gcmV0dXJuIGVuZA0KCUxldmVsU3BlbGwobGV2ZWxTZXF1ZW5jZXNbTWVudS5taXNjLmF1dG9sZXZlbC5sZXZlbEF1dG8gLSAxXVtteUhlcm8ubGV2ZWxdKQ0KCWxhc3RMZXZlbCA9IG15SGVyby5sZXZlbA0KZW5kDQotLV1dDQoNCmZ1bmN0aW9uIERyYXdNZW51KCkNCgktLSBNZW51DQogTWVudSA9IHNjcmlwdENvbmZpZygiUiZCLUFubmllIiwgIk5Bbm5pZSIpDQoNCiAtLSBDb21ibw0KIE1lbnU6YWRkU3ViTWVudSgiQ29tYm8iLCAiY29tYm8iKQ0KIE1lbnUuY29tYm86YWRkUGFyYW0oImNvbWJvV2F5IiwgIkNhc3QgQ29tYm8iLCBTQ1JJUFRfUEFSQU1fTElTVCwgMSwgeyJRV1IiLCAiV1FSIiwgIlJRVyIsICJSV1EifSkNCiBNZW51LmNvbWJvOmFkZFBhcmFtKCJjb21ibyIsICJDb21ibyIsIFNDUklQVF9QQVJBTV9PTktFWURPV04sIGZhbHNlLCAzMikNCiBNZW51LmNvbWJvOmFkZFBhcmFtKCJkaXNhYmxlQUEiLCAiRGlzYWJsZSBBQSBpbiBDb21ibyIsIFNDUklQVF9QQVJBTV9PTk9GRiwgZmFsc2UpDQogTWVudS5jb21ibzphZGRQYXJhbSgiY29tYm9ERkciLCAiVXNlIERGRyIsIFNDUklQVF9QQVJBTV9PTk9GRiwgdHJ1ZSkNCiBNZW51LmNvbWJvOmFkZFBhcmFtKCJjb21ib1EiLCAiVXNlIFEiLCBTQ1JJUFRfUEFSQU1fT05PRkYsIHRydWUpDQogTWVudS5jb21ibzphZGRQYXJhbSgiY29tYm9XIiwgIlVzZSBXIiwgU0NSSVBUX1BBUkFNX09OT0ZGLCB0cnVlKQ0KIE1lbnUuY29tYm86YWRkUGFyYW0oImNvbWJvUiIsICJVc2UgUiIsIFNDUklQVF9QQVJBTV9PTk9GRiwgdHJ1ZSkNCiBNZW51LmNvbWJvOmFkZFN1Yk1lbnUoIlIgVXNhZ2UiLCAiUlVzYWdlIikNCiBNZW51LmNvbWJvLlJVc2FnZTphZGRQYXJhbSgiaG93UiIsICJVc2UgUiIsIFNDUklQVF9QQVJBTV9MSVNULCAxLCB7Ik5vcm1hbCIsICJLaWxsYWJsZSIsICJTdHVuIn0pDQogZm9yIGksIGVuZW15IGluIGlwYWlycyhHZXRFbmVteUhlcm9lcygpKSBkbw0KCU1lbnUuY29tYm8uUlVzYWdlOmFkZFBhcmFtKGVuZW15LmNoYXJOYW1lLCAiVXNlIFIgb24gIiAuLiBlbmVteS5jaGFyTmFtZSwgU0NSSVBUX1BBUkFNX09OT0ZGLCB0cnVlKQ0KIGVuZA0KDQoNCiAtLSBGbGFzaCBTZXR0aW5ncyAtLVtbIElOIFBST0dSRVNTIF1dDQogaWYgZmxhc2ggfj0gbmlsIHRoZW4NCiAJTWVudTphZGRTdWJNZW51KCJGbGFzaCIsICJmbGFzaCIpDQogCU1lbnUuZmxhc2g6YWRkUGFyYW0oInVzZUZsYXNoIiwgIlVzZSBGbGFzaCBpbiBBdXRvUiIsIFNDUklQVF9QQVJBTV9PTk9GRiwgZmFsc2UpDQogCU1lbnUuZmxhc2g6YWRkUGFyYW0oImFsbGllcyIsICJNaW4gYWxsaWVzIG5lYXJieSB0byBmbGFzaCIsIFNDUklQVF9QQVJBTV9TTElDRSwgMCwgMCwgI0dldEFsbHlIZXJvZXMoKSwgMCkNCiAJTWVudS5mbGFzaDphZGRQYXJhbSgiYWxsaWVzcmFuZ2UiLCAiRGlzdGFuY2UgYmV0d2VlbiB5b3UgYW5kIGFsbGllcyIsIFNDUklQVF9QQVJBTV9TTElDRSwgMzAwLCAwLCAyMDAwLCAwKQ0KIAlNZW51LmZsYXNoOmFkZFBhcmFtKCJlbmVtaWVzIiwgIk1heCBlbmVtaWVzIG5lYXJieSB0byBmbGFzaCIsIFNDUklQVF9QQVJBTV9TTElDRSwgMCwgMCwgI0dldEVuZW15SGVyb2VzKCksIDApDQogCU1lbnUuZmxhc2g6YWRkUGFyYW0oImVuZW1pZXNyYW5nZSIsICJEaXN0YW5jZSB0YXJnZXQgJiBvdGhlciBlbmVtaWVzIiwgU0NSSVBUX1BBUkFNX1NMSUNFLCAzMDAsIDAsIDUwMCwgMCkNCiBlbmQNCg0KIC0tIEF1dG8gVWx0DQogTWVudTphZGRTdWJNZW51KCJBdXRvIFIiLCAiYXV0b1IiKQ0KIE1lbnUuYXV0b1I6YWRkUGFyYW0oImF1dG9VbHQiLCAiVXNlIEF1dG8gVWx0IiwgU0NSSVBUX1BBUkFNX09OT0ZGLCBmYWxzZSkNCiBNZW51LmF1dG9SOmFkZFBhcmFtKCJoaXRYIiwgIkF1dG8gUiBpZiBoaXQgeCBlbmVtaWVzIiwgU0NSSVBUX1BBUkFNX1NMSUNFLCAzLCAwLCA1LCAwKQ0KIE1lbnUuYXV0b1I6YWRkU3ViTWVudSgiVXNlIFIgb24iLCAidXNlUiIpDQogZm9yIGksIGVuZW15IGluIGlwYWlycyhHZXRFbmVteUhlcm9lcygpKSBkbw0KCU1lbnUuYXV0b1IudXNlUjphZGRQYXJhbShlbmVteS5jaGFyTmFtZSwgIkF1dG8gUiBvbiAiIC4uIGVuZW15LmNoYXJOYW1lLCBTQ1JJUFRfUEFSQU1fT05PRkYsIHRydWUpDQogZW5kDQoNCiAtLSBBdXRva2lsbA0KIE1lbnU6YWRkU3ViTWVudSgiQXV0byBLaWxsIiwgImF1dG9raWxsIikNCiBNZW51LmF1dG9raWxsOmFkZFBhcmFtKCJhdXRva2lsbCIsICJBdXRvIEtpbGwgLSBLaWxsU3RlYWwiLCBTQ1JJUFRfUEFSQU1fT05PRkYsIGZhbHNlKQ0KIE1lbnUuYXV0b2tpbGw6YWRkU3ViTWVudSgiVXNlIFNwZWxscyIsICJzcGVsbHMiKQ0KIE1lbnUuYXV0b2tpbGwuc3BlbGxzOmFkZFBhcmFtKCJhdXRva2lsbERGRyIsICJVc2UgREZHIiwgU0NSSVBUX1BBUkFNX09OT0ZGLCB0cnVlKQ0KIGlmIGlnbml0ZSB+PSBuaWwgdGhlbg0KIAlNZW51LmF1dG9raWxsLnNwZWxsczphZGRQYXJhbSgiYXV0b2tpbGxJZ25pdGUiLCAiVXNlIElnbml0ZSIsIFNDUklQVF9QQVJBTV9PTk9GRiwgdHJ1ZSkNCiBlbmQNCiBNZW51LmF1dG9raWxsLnNwZWxsczphZGRQYXJhbSgiYXV0b2tpbGxRIiwgIlVzZSBRIiwgU0NSSVBUX1BBUkFNX09OT0ZGLCB0cnVlKQ0KIE1lbnUuYXV0b2tpbGwuc3BlbGxzOmFkZFBhcmFtKCJhdXRva2lsbFciLCAiVXNlIFciLCBTQ1JJUFRfUEFSQU1fT05PRkYsIHRydWUpDQogTWVudS5hdXRva2lsbC5zcGVsbHM6YWRkUGFyYW0oImF1dG9raWxsUiIsICJVc2UgUiIsIFNDUklQVF9QQVJBTV9PTk9GRiwgdHJ1ZSkNCiBNZW51LmF1dG9raWxsOmFkZFN1Yk1lbnUoIkVuZW1pZXMiLCAiZW5lbWllcyIpDQogZm9yIGksIGVuZW15IGluIGlwYWlycyhHZXRFbmVteUhlcm9lcygpKSBkbw0KCU1lbnUuYXV0b2tpbGwuZW5lbWllczphZGRQYXJhbShlbmVteS5jaGFyTmFtZSwgIktpbGwgIiAuLiBlbmVteS5jaGFyTmFtZSwgU0NSSVBUX1BBUkFNX09OT0ZGLCB0cnVlKQ0KIGVuZA0KDQpNZW51LmF1dG9raWxsOmFkZFN1Yk1lbnUoIk9wdGlvbmFsIFNldHRpbmdzIiwgIm9wdGlvbmFsIikNCk1lbnUuYXV0b2tpbGwub3B0aW9uYWw6YWRkUGFyYW0oInVzZU9wdGlvbmFsIiwgIlVzZSBPcHRpb25hbCBTZXR0aW5ncyIsIFNDUklQVF9QQVJBTV9PTk9GRiwgdHJ1ZSkNCk1lbnUuYXV0b2tpbGwub3B0aW9uYWw6YWRkUGFyYW0oInJhbmdlIiwgIlJhbmdlIHRvIGVuZW15IiwgU0NSSVBUX1BBUkFNX1NMSUNFLCA1NzUsIDAsIDYwMCwgMCkNCk1lbnUuYXV0b2tpbGwub3B0aW9uYWw6YWRkUGFyYW0oImVuZW1pZXNuZWFyYnkiLCAiTWF4IGVuZW1pZXMgaW4gdGhhdCByYW5nZSIsIFNDUklQVF9QQVJBTV9TTElDRSwgI0dldEVuZW15SGVyb2VzKCksIDAsICNHZXRFbmVteUhlcm9lcygpLCAwKQ0KDQogLS0gSGFyYXNzDQogTWVudTphZGRTdWJNZW51KCJIYXJhc3MiLCAiaGFyYXNzIikNCiBNZW51LmhhcmFzczphZGRQYXJhbSgiaGFyYXNzIiwgIkhhcmFzcyAoVCkiLCBTQ1JJUFRfUEFSQU1fT05LRVlET1dOLCBmYWxzZSwgc3RyaW5nLmJ5dGUoIlQiKSkNCiBNZW51LmhhcmFzczphZGRQYXJhbSgiaGFyYXNzVCIsICJIYXJhc3MgVG9nZ2xlIChZKSIsIFNDUklQVF9QQVJBTV9PTktFWVRPR0dMRSwgZmFsc2UsIHN0cmluZy5ieXRlKCJZIikpDQogTWVudS5oYXJhc3M6YWRkUGFyYW0oImhhcmFzc1EiLCAiVXNlIFEiLCBTQ1JJUFRfUEFSQU1fT05PRkYsIHRydWUpDQogTWVudS5oYXJhc3M6YWRkUGFyYW0oImhhcmFzc1ciLCAiVXNlIFciLCBTQ1JJUFRfUEFSQU1fT05PRkYsIHRydWUpDQogTWVudS5oYXJhc3M6YWRkUGFyYW0oImF1dG9RIiwgIkF1dG8gUSB3aGVuIHN0dW5zIGVuZW15IiwgU0NSSVBUX1BBUkFNX09OT0ZGLCBmYWxzZSkNCiAtLWlmIFZJUF9VU0VSIHRoZW4NCiAtLQlNZW51LmhhcmFzczphZGRQYXJhbSgiYXV0b1FXIiwgIkF1dG8gUS9XIHdoZW4gVyB3aWxsIHN0dW4gZW5lbXkiLCBTQ1JJUFRfUEFSQU1fT05PRkYsIGZhbHNlKQ0KIC0tZW5kDQogTWVudS5oYXJhc3M6YWRkUGFyYW0oImhhcmFzc01hbmEiLCAiTWFuYSBNYW5hZ2VyICUiLCBTQ1JJUFRfUEFSQU1fU0xJQ0UsIDAuMjUsIDAsIDEsIDIpDQoNCiAtLSBGYXJtaW5nDQogTWVudTphZGRTdWJNZW51KCJGYXJtaW5nIiwgImZhcm0iKQ0KIE1lbnUuZmFybTphZGRQYXJhbSgiZmFybSIsICJGYXJtaW5nIChLKSIsIFNDUklQVF9QQVJBTV9PTktFWVRPR0dMRSwgZmFsc2UsIHN0cmluZy5ieXRlKCJLIikpDQogTWVudS5mYXJtOmFkZFBhcmFtKCJmYXJtUSIsICJGYXJtIHVzaW5nIFEiLCBTQ1JJUFRfUEFSQU1fT05PRkYsIGZhbHNlKQ0KIE1lbnUuZmFybTphZGRQYXJhbSgiZmFybVciLCAiRmFybSB1c2luZyBXIiwgU0NSSVBUX1BBUkFNX09OT0ZGLCBmYWxzZSkNCiBNZW51LmZhcm06YWRkUGFyYW0oImZhcm1TdHVuIiwgIkZhcm0gdW50aWwgU3R1biBpcyB1cCIsIFNDUklQVF9QQVJBTV9PTk9GRiwgZmFsc2UpDQoNCiAtLSBKdW5nbGUgU3RlYWwNCiBNZW51OmFkZFN1Yk1lbnUoIkp1bmdsZSBTdGVhbCIsICJqdW5nbGUiKQ0KIE1lbnUuanVuZ2xlOmFkZFBhcmFtKCJ1c2VKdW5nbGUiLCAiSnVuZ2xlIFN0ZWFsIiwgU0NSSVBUX1BBUkFNX09OT0ZGLCBmYWxzZSkNCiBNZW51Lmp1bmdsZTphZGRQYXJhbSgic3RlYWxCbHVlIiwgIlN0ZWFsIEJsdWUgQnVmZiIsIFNDUklQVF9QQVJBTV9PTk9GRiwgZmFsc2UpDQogTWVudS5qdW5nbGU6YWRkUGFyYW0oInN0ZWFsUmVkIiwgIlN0ZWFsIFJlZCBCdWZmIiwgU0NSSVBUX1BBUkFNX09OT0ZGLCBmYWxzZSkNCiBNZW51Lmp1bmdsZTphZGRQYXJhbSgic3RlYWxEcmFnb24iLCAiU3RlYWwgRHJhZ29uIEJ1ZmYiLCBTQ1JJUFRfUEFSQU1fT05PRkYsIGZhbHNlKQ0KIE1lbnUuanVuZ2xlOmFkZFBhcmFtKCJzdGVhbEJhcm9uIiwgIlN0ZWFsIEJhcm9uIEJ1ZmYiLCBTQ1JJUFRfUEFSQU1fT05PRkYsIGZhbHNlKQ0KIE1lbnUuanVuZ2xlOmFkZFN1Yk1lbnUoIk9wdGlvbmFsIFNldHRpbmdzIiwgIm9wdGlvbmFsIikNCiBNZW51Lmp1bmdsZS5vcHRpb25hbDphZGRQYXJhbSgidXNlT3B0aW9uYWwiLCAiVXNlIE9wdGlvbmFsIFNldHRpbmdzIiwgU0NSSVBUX1BBUkFNX09OT0ZGLCB0cnVlKQ0KIE1lbnUuanVuZ2xlLm9wdGlvbmFsOmFkZFBhcmFtKCJlbmVteWp1bmdsZXIiLCAiRW5lbXkgSnVuZ2xlIE5lYXIiLCBTQ1JJUFRfUEFSQU1fT05PRkYsIHRydWUpDQogTWVudS5qdW5nbGUub3B0aW9uYWw6YWRkUGFyYW0oInJhbmdlZW5lbXlqdW5nbGVyIiwgIlJhbmdlIEVuZW15IEp1bmdsZXIgLSBNb25zdGVyIiwgU0NSSVBUX1BBUkFNX1NMSUNFLCAyMDAsIDAsIDEwMDAsIDApDQogTWVudS5qdW5nbGUub3B0aW9uYWw6YWRkUGFyYW0oImFsbHlqdW5nbGVyIiwgIkFsbHkgSnVuZ2xlIE5lYXIiLCBTQ1JJUFRfUEFSQU1fT05PRkYsIGZhbHNlKQ0KIE1lbnUuanVuZ2xlLm9wdGlvbmFsOmFkZFBhcmFtKCJyYW5nZWFsbHlqdW5nbGVyIiwgIlJhbmdlIEFsbHkgSnVuZ2xlciAtIE1vbnN0ZXIiLCBTQ1JJUFRfUEFSQU1fU0xJQ0UsIDIwMCwgMCwgMTAwMCwgMCkNCg0KDQogLS1EcmF3aW5ncw0KIE1lbnU6YWRkU3ViTWVudSgiRHJhd2luZ3MiLCAiZHJhd2luZ3MiKQ0KIE1lbnUuZHJhd2luZ3M6YWRkUGFyYW0oImRyYXciLCAiRHJhd2luZ3MiLCBTQ1JJUFRfUEFSQU1fT05PRkYsIHRydWUpDQogTWVudS5kcmF3aW5nczphZGRQYXJhbSgiZHJhd1EiLCAiRHJhdyBRIFJhbmdlIiwgU0NSSVBUX1BBUkFNX09OT0ZGLCB0cnVlKQ0KIE1lbnUuZHJhd2luZ3M6YWRkUGFyYW0oImRyYXdXIiwgIkRyYXcgVyBSYW5nZSIsIFNDUklQVF9QQVJBTV9PTk9GRiwgdHJ1ZSkNCiBNZW51LmRyYXdpbmdzOmFkZFBhcmFtKCJkcmF3UiIsICJEcmF3IFIgUmFuZ2UiLCBTQ1JJUFRfUEFSQU1fT05PRkYsIHRydWUpDQogTWVudS5kcmF3aW5nczphZGRQYXJhbSgiZHJhd0tpbGxhYmxlIiwgIkRyYXcgS2lsbGFibGUgVGV4dCIsIFNDUklQVF9QQVJBTV9PTk9GRiwgdHJ1ZSkNCiBNZW51LmRyYXdpbmdzOmFkZFBhcmFtKCJkcmF3RGFtYWdlIiwgIkRyYXcgRGFtYWdlIiwgU0NSSVBUX1BBUkFNX09OT0ZGLCB0cnVlKQ0KDQogLS0gTWlzYw0KIE1lbnU6YWRkU3ViTWVudSgiTWlzYyIsICJtaXNjIikNCiBNZW51Lm1pc2M6YWRkU3ViTWVudSgiRSBTZXR0aW5ncyIsICJFc2V0dGluZ3MiKQ0KIE1lbnUubWlzYy5Fc2V0dGluZ3M6YWRkUGFyYW0oInByb2NFVyIsICJVc2UgRSBhbmQgVyBpbiBmb3VudGFpbiIsIFNDUklQVF9QQVJBTV9PTk9GRiwgZmFsc2UpDQogTWVudS5taXNjLkVzZXR0aW5nczphZGRQYXJhbSgicHJvY0UiLCAiVXNlIEUgdG8gZ2V0IHN0YWNrcyIsIFNDUklQVF9QQVJBTV9PTk9GRiwgZmFsc2UpDQogTWVudS5taXNjLkVzZXR0aW5nczphZGRQYXJhbSgidXNlRW9uQXR0YWNrIiwgIkF1dG8gRSB3aGVuIGF0dGFja2VkIiwgU0NSSVBUX1BBUkFNX09OT0ZGLCBmYWxzZSkNCiBNZW51Lm1pc2MuRXNldHRpbmdzOmFkZFBhcmFtKCJpbmZvIiwgIkNBTiBOT1QgQkUgQk9USCBPTiIsIFNDUklQVF9QQVJBTV9JTkZPLCAiQ0FSRUZVTCIpDQoNCi0tW1sgVGVtcG9yYXJ5IGRpc2FibGVkDQogIC0tIEF1dG8gTGV2ZWwNCiBNZW51Lm1pc2M6YWRkU3ViTWVudSgiQXV0byBMZXZlbCIsICJhdXRvbGV2ZWwiKQ0KIE1lbnUubWlzYy5hdXRvbGV2ZWw6YWRkUGFyYW0oImF1dG9MZXZlbCIsICJBdXRvIExldmVsIFNwZWxscyIsIFNDUklQVF9QQVJBTV9PTk9GRiwgZmFsc2UpDQogTWVudS5taXNjLmF1dG9sZXZlbDphZGRQYXJhbSgibGV2ZWxBdXRvIiwgIkF1dG8gTGV2ZWwgU3BlbGxzIiwgU0NSSVBUX1BBUkFNX0xJU1QsIDEsIHsgIk9mZiIsICJRV0VSIiwgIldRRVIifSkNCiAtLV1dDQoNCiAtLSBBdXRvIFBvdGlvbnMNCiBNZW51Lm1pc2M6YWRkU3ViTWVudSgiQXV0byBQb3Rpb25zIiwgImF1dG9wb3Rpb25zIikNCiBNZW51Lm1pc2MuYXV0b3BvdGlvbnM6YWRkUGFyYW0oInVzZVBvdGlvbnMiLCAiRHJpbmsgUG90aW9ucyIsIFNDUklQVF9QQVJBTV9PTk9GRiwgdHJ1ZSkNCiBNZW51Lm1pc2MuYXV0b3BvdGlvbnM6YWRkUGFyYW0oImhlYWx0aCIsICJIZWFsdGggdW5kZXIgJSIsIFNDUklQVF9QQVJBTV9TTElDRSwgMC4yNSwgMCwgMSwgMikNCiBNZW51Lm1pc2MuYXV0b3BvdGlvbnM6YWRkUGFyYW0oIm1hbmEiLCAiTWFuYSB1bmRlciAlIiwgU0NSSVBUX1BBUkFNX1NMSUNFLCAwLjI1LCAwLCAxLCAyKQ0KDQogTWVudS5taXNjOmFkZFN1Yk1lbnUoIlpob255YXMiLCAiemhvbnlhcyIpDQogTWVudS5taXNjLnpob255YXM6YWRkUGFyYW0oInpob255YXMiLCAiQXV0byBaaG9ueWFzIiwgU0NSSVBUX1BBUkFNX09OT0ZGLCB0cnVlKQ0KIE1lbnUubWlzYy56aG9ueWFzOmFkZFBhcmFtKCJ6aG9ueWFzdW5kZXIiLCAiVXNlIFpob255YXMgdW5kZXIgJSBoZWFsdGgiLCBTQ1JJUFRfUEFSQU1fU0xJQ0UsIDAuMjAsIDAsIDEgLDIpDQoNCmlmIGhlYWwgfj0gbmlsIHRoZW4NCglNZW51Lm1pc2M6YWRkU3ViTWVudSgiQXV0byBIZWFsIiwgImF1dG9oZWFsIikNCglNZW51Lm1pc2MuYXV0b2hlYWw6YWRkUGFyYW0oInVzZUhlYWwiLCAiVXNlIFN1bW1vbmVyIEhlYWwiLCBTQ1JJUFRfUEFSQU1fT05PRkYsIGZhbHNlKQ0KCU1lbnUubWlzYy5hdXRvaGVhbDphZGRQYXJhbSgiYW1vdW50T2ZIZWFsdGgiLCAiVW5kZXIgJSBvZiBoZWFsdGgiLCBTQ1JJUFRfUEFSQU1fU0xJQ0UsIDAsIDAsIDEsIDIpDQoJTWVudS5taXNjLmF1dG9oZWFsOmFkZFBhcmFtKCJoZWxwSGVhbCIsICJVc2UgSGVhbCB0byBzYXZlIHRlYW1tYXRlcyIsIFNDUklQVF9QQVJBTV9PTk9GRiwgZmFsc2UpDQplbmQNCmlmIGlnbml0ZSB+PSBuaWwgdGhlbg0KCU1lbnUubWlzYzphZGRTdWJNZW51KCJBdXRvIElnbml0ZSIsICJhdXRvaWduaXRlIikNCglNZW51Lm1pc2MuYXV0b2lnbml0ZTphZGRQYXJhbSgidXNlSWduaXRlIiwgIlVzZSBTdW1tb25lciBJZ25pdGUiLCBTQ1JJUFRfUEFSQU1fT05PRkYsIHRydWUpDQogCWZvciBpLCBlbmVteSBpbiBpcGFpcnMoR2V0RW5lbXlIZXJvZXMoKSkgZG8NCgkJTWVudS5taXNjLmF1dG9pZ25pdGU6YWRkUGFyYW0oZW5lbXkuY2hhck5hbWUsICJVc2UgSWduaXRlIE9uICIgLi4gZW5lbXkuY2hhck5hbWUsIFNDUklQVF9QQVJBTV9PTk9GRiwgdHJ1ZSkNCiAJZW5kDQplbmQNCg0KaWYgYmFycmllciB+PSBuaWwgdGhlbg0KCU1lbnUubWlzYzphZGRTdWJNZW51KCJBdXRvIEJhcnJpZXIiLCAiYXV0b2JhcnJpZXIiKQ0KCU1lbnUubWlzYy5hdXRvYmFycmllcjphZGRQYXJhbSgidXNlQmFycmllciIsICJVc2UgU3VtbW9uZXIgQmFycmllciIsIFNDUklQVF9QQVJBTV9PTk9GRiwgZmFsc2UpDQoJTWVudS5taXNjLmF1dG9iYXJyaWVyOmFkZFBhcmFtKCJhbW91bnRPZkhlYWx0aCIsICJVbmRlciAlIG9mIGhlYWx0aCIsIFNDUklQVF9QQVJBTV9TTElDRSwgMCwgMCwgMSwgMikNCmVuZA0KDQoNCiAgLS0gVGFyZ2V0IFNlbGVjdG9yDQogIE1lbnU6YWRkVFModHMpDQogIHRzLm5hbWUgPSAiVGFyZ2V0U2VsZWN0b3IiDQoNCiBNZW51Lm1pc2M6YWRkU3ViTWVudSgiR2FwY2xvc2VyIiwgImdjIikNCiBBbnRpR2FwY2xvc2VyKE1lbnUubWlzYy5nYywgY2FzdFN0dW5HYXBDbG9zaW5nKQ0KIE1lbnUubWlzYzphZGRTdWJNZW51KCJJbnRlcnJ1cHRlciIsICJhaSIpDQogSW50ZXJydXB0ZXIoTWVudS5taXNjLmFpLCBjYXN0U3R1bkludGVycnVwdGFibGUpDQoNCiAtLSBPcmJ3YWxrZXIgdG8gbWVudQ0KIE1lbnU6YWRkU3ViTWVudSgiT3Jid2Fsa2VyIiwgIk9yYndhbGtlciIpDQogT3JiV2FsazpMb2FkVG9NZW51KE1lbnUuT3Jid2Fsa2VyKQ0KDQoNCiAgLS0gRGVmYXVsdCBJbmZvcm1hdGlvbg0KIE1lbnU6YWRkUGFyYW0oIlZlcnNpb24iLCAiVmVyc2lvbiIsIFNDUklQVF9QQVJBTV9JTkZPLCB2ZXJzaW9uKQ0KIE1lbnU6YWRkUGFyYW0oIkF1dGhvciIsICJBdXRob3IiLCAgU0NSSVBUX1BBUkFNX0lORk8sIGF1dGhvcikNCg0KIC0tIEFsd2F5cyBzaG93DQogTWVudS5jb21ibzpwZXJtYVNob3coImNvbWJvIikNCiBNZW51LmhhcmFzczpwZXJtYVNob3coImhhcmFzcyIpDQogTWVudS5oYXJhc3M6cGVybWFTaG93KCJoYXJhc3NUIikNCiAtLU1lbnUua2lsbHN0ZWFsOnBlcm1hU2hvdygia2lsbHN0ZWFsIikNCiBNZW51LmF1dG9raWxsOnBlcm1hU2hvdygiYXV0b2tpbGwiKQ0KIE1lbnUuZmFybTpwZXJtYVNob3coImZhcm0iKQ0KIE1lbnUuanVuZ2xlOnBlcm1hU2hvdygidXNlSnVuZ2xlIikNCiBNZW51LmRyYXdpbmdzOnBlcm1hU2hvdygiZHJhdyIpDQoNCmVuZA0KDQpmdW5jdGlvbiBNZW51Q2hlY2soKQ0KCWlmIE1lbnUubWlzYy5Fc2V0dGluZ3MucHJvY0UgdGhlbg0KIAkJTWVudS5taXNjLkVzZXR0aW5ncy51c2VFb25BdHRhY2sgPSBmYWxzZQ0KIAllbmQNCiAJaWYgTWVudS5taXNjLkVzZXR0aW5ncy51c2VFb25BdHRhY2sgdGhlbg0KIAkJTWVudS5taXNjLkVzZXR0aW5ncy5wcm9jRSA9IGZhbHNlDQogCWVuZA0KZW5kDQoNCi0tIEdhcGNsb3NlciAoU291cmNlTGliIFRyaWdnZXJDYWxsYmFja3MpDQpmdW5jdGlvbiBjYXN0U3R1bkdhcENsb3NpbmcodW5pdCwgc3BlbGwpDQoJaWYgR2V0RGlzdGFuY2UodW5pdCkgPCA2MDAgYW5kIGNhblN0dW4gdGhlbg0KCQlpZiBRcmVhZHkgYW5kIFdyZWFkeSB0aGVuDQoJCQlDYXN0USh1bml0KQ0KCQllbHNlaWYgUXJlYWR5IHRoZW4NCgkJCUNhc3RRKHVuaXQpDQoJCWVsc2VpZiBXcmVhZHkgdGhlbg0KCQkJQ2FzdFcodW5pdCkNCgkJZW5kDQoJZW5kDQplbmQNCg0KLS1JbnRlcnVwdGFibGUgKFNvdXJjZUxpYiBUcmlnZ2VyQ2FsbGJhY2tzKQ0KZnVuY3Rpb24gY2FzdFN0dW5JbnRlcnJ1cHRhYmxlKHVuaXQsIHNwZWxsKQ0KCWlmIEdldERpc3RhbmNlKHVuaXQpIDwgNjAwIGFuZCBjYW5TdHVuIHRoZW4NCgkJaWYgUXJlYWR5IGFuZCBXcmVhZHkgdGhlbg0KCQkJQ2FzdFEodW5pdCkNCgkJZWxzZWlmIFFyZWFkeSB0aGVuDQoJCQlDYXN0USh1bml0KQ0KCQllbHNlaWYgV3JlYWR5IHRoZW4NCgkJCUNhc3RXKHVuaXQpDQoJCWVuZA0KCWVuZA0KZW5kDQoNCi0tIFJldHVybiBudW1iZXIgb2YgQWxseSBpbiByYW5nZQ0KZnVuY3Rpb24gQ291bnRBbGx5SGVyb0luUmFuZ2UocmFuZ2UsIG9iamVjdCkNCiAgICBvYmplY3QgPSBvYmplY3Qgb3IgbXlIZXJvDQogICAgcmFuZ2UgPSByYW5nZSBhbmQgcmFuZ2UgKiByYW5nZSBvciBteUhlcm8ucmFuZ2UgKiBteUhlcm8ucmFuZ2UNCiAgICBsb2NhbCBlbmVteUluUmFuZ2UgPSAwDQogICAgZm9yIGkgPSAxLCBoZXJvTWFuYWdlci5pQ291bnQsIDEgZG8NCiAgICAgICAgbG9jYWwgaGVybyA9IGhlcm9NYW5hZ2VyOmdldEhlcm8oaSkNCiAgICAgICAgaWYgaGVyby50ZWFtID09IG9iamVjdC50ZWFtIGFuZCBHZXREaXN0YW5jZVNxcihvYmplY3QsIGhlcm8pIDw9IHJhbmdlIHRoZW4NCiAgICAgICAgICAgIGVuZW15SW5SYW5nZSA9IGVuZW15SW5SYW5nZSArIDENCiAgICAgICAgZW5kDQogICAgZW5kDQogICAgcmV0dXJuIGVuZW15SW5SYW5nZQ0KZW5kDQoNCmZ1bmN0aW9uIENhbGNTcGVsbERhbWFnZShlbmVteSkNCg0KCWlmIG5vdCBlbmVteSB0aGVuIHJldHVybiBlbmQNCg0KDQoJLS0gQ3JlZGl0cyB0byBFeHRyYUdveiBmb3IgU3BlbGwgRGFtYWdlIExpYnJhcnkNCgktLSBJIHB1dCB0aGlzIGluIHRoaXMgc2NyaXB0IG15c2VsZiwgc28gSSBjYW4gbW9kaWZ5IGl0IG15c2VsZiBhbmQgc28gaXQncyBub3QgZGVwZW5kYW50DQoJLS0gb2YgdGhlIHN0YXRlIG9mIHRoZSBsaWJyYXJ5Lg0KCWxvY2FsIGRhbWFnZVEgPSAzNSAqIG15SGVybzpHZXRTcGVsbERhdGEoX1EpLmxldmVsICsgNDUgKyAuOCAqIG15SGVyby5hcA0KCWxvY2FsIGRhbWFnZVcgPSA0NSAqIG15SGVybzpHZXRTcGVsbERhdGEoX1cpLmxldmVsICsgMjUgKyAuODUgKiBteUhlcm8uYXANCglsb2NhbCBkYW1hZ2VSID0gbWF0aC5tYXgoMTI1ICogbXlIZXJvOkdldFNwZWxsRGF0YShfUikubGV2ZWwgKyA1MCArIC44ICogbXlIZXJvLmFwKQ0KDQoJcmV0dXJuICgobXlIZXJvOkdldFNwZWxsRGF0YShfUSkubGV2ZWwgPj0gMSBhbmQgbXlIZXJvOkNhbGNNYWdpY0RhbWFnZShlbmVteSwgZGFtYWdlUSkpIG9yIDApLCAoKG15SGVybzpHZXRTcGVsbERhdGEoX1cpLmxldmVsID49IDEgYW5kIG15SGVybzpDYWxjTWFnaWNEYW1hZ2UoZW5lbXksIGRhbWFnZVcpKSBvciAwKSwgKChteUhlcm86R2V0U3BlbGxEYXRhKF9RKS5sZXZlbCA+PSAxIGFuZCBteUhlcm86Q2FsY01hZ2ljRGFtYWdlKGVuZW15LCBkYW1hZ2VSKSkgb3IgMCkNCmVuZA0KDQotLSBUaGFua3MgQmlsR29kIGZvciByZWR1Y2luZyBteSBjb2RlIHRvIG9ubHkgNyBsaW5lcw0KZnVuY3Rpb24gRmluZEp1bmdsZXJzKCkNCglmb3IgaSA9IDEsIGhlcm9NYW5hZ2VyLmlDb3VudCBkbw0KCQlpZiAoaGVyb01hbmFnZXI6Z2V0SGVybyhpKTpHZXRTcGVsbERhdGEoU1VNTU9ORVJfMSkubmFtZTpmaW5kKCJzbWl0ZSIpIG9yIGhlcm9NYW5hZ2VyOmdldEhlcm8oaSk6R2V0U3BlbGxEYXRhKFNVTU1PTkVSXzIpLm5hbWU6ZmluZCgic21pdGUiKSkgdGhlbg0KCQkJdGFibGUuaW5zZXJ0KChoZXJvTWFuYWdlcjpnZXRIZXJvKGkpLnRlYW0gPT0gbXlIZXJvLnRlYW0gYW5kIGFsbHlKdW5nbGVycykgb3IgZW5lbXlKdW5nbGVycywgaGVyb01hbmFnZXI6Z2V0SGVybyhpKSkNCiAgICAJZW5kDQoJZW5kDQplbmQNCg0KLS1bWw0KLS0tLS0gRnVuY3Rpb25zIHRyYW5zZmVycmVkIGZyb20gU291cmNlTGliLCB0aGFua3MgdG8gSGVsbHNpbmcgZm9yIGhpcyBoYXJkIHdvcmsuIC0tLS0NCgkJSSB0YWtlIGFic29sdXRlIG5vIGNyZWRpdHMgZm9yIHRoZSBjb2RlIGJlbG93DQoJCUkgZG8gbm90IHdhbnQgdG8gcmVxdWlyZSBTb3VyY2VMaWIgZm9yIG15IHNjcmlwdCwgc2luY2UgaXQgaXNuJ3QgZnVsbHkgbmVlZGVkLCBhcyBBbm5pZSBkb2Vzbid0IHJlcXVpcmUgc2tpbGxzaG90cy4NCgkJSSBzaW1wbHkgcG9ydGVkIHVzZWZ1bCBpbmZvcm1hdGlvbiB0byBteSBvd24gc2NyaXB0Lg0KCQlBbGwgY3JlZGl0cyBnb2VzIHRvIEhlbGxzaW5nIGFuZCB0aGUgb3RoZXIgcGVvcGxlIHdobyBoYXZlIHdvcmtlZCBvbiBTb3VyY2VMaWINCi0tXV0NCi0tLVtbDQotLSBTZXQgZW5lbXkgYmFyIGRhdGENCmZvciBpLCBlbmVteSBpbiBpcGFpcnMoR2V0RW5lbXlIZXJvZXMoKSkgZG8NCiAgICBlbmVteS5iYXJEYXRhID0ge1BlcmNlbnRhZ2VPZmZzZXQgPSB7eCA9IDAsIHkgPSAwfSB9LS1HZXRFbmVteUJhckRhdGEoKS0tc3BhZGdlIHBscw0KZW5kDQoNCmZ1bmN0aW9uIEdldEVuZW15SFBCYXJQb3MoZW5lbXkpDQoNCiAgICAtLSBQcmV2ZW50IGVycm9yIHNwYW1taW5nDQogICAgaWYgbm90IGVuZW15LmJhckRhdGEgdGhlbg0KICAgICAgICByZXR1cm4NCiAgICBlbmQNCg0KICAgIGxvY2FsIGJhclBvcyA9IEdldFVuaXRIUEJhclBvcyhlbmVteSkNCiAgICBsb2NhbCBiYXJQb3NPZmZzZXQgPSBHZXRVbml0SFBCYXJPZmZzZXQoZW5lbXkpDQogICAgbG9jYWwgYmFyT2Zmc2V0ID0gUG9pbnQoZW5lbXkuYmFyRGF0YS5QZXJjZW50YWdlT2Zmc2V0LngsIGVuZW15LmJhckRhdGEuUGVyY2VudGFnZU9mZnNldC55KQ0KICAgIGxvY2FsIGJhclBvc1BlcmNlbnRhZ2VPZmZzZXQgPSBQb2ludChlbmVteS5iYXJEYXRhLlBlcmNlbnRhZ2VPZmZzZXQueCwgZW5lbXkuYmFyRGF0YS5QZXJjZW50YWdlT2Zmc2V0LnkpDQoNCiAgICBsb2NhbCBCYXJQb3NPZmZzZXRYID0gMTY5DQogICAgbG9jYWwgQmFyUG9zT2Zmc2V0WSA9IDQ3DQogICAgbG9jYWwgQ29ycmVjdGlvblggPSAxNg0KICAgIGxvY2FsIENvcnJlY3Rpb25ZID0gNA0KDQogICAgYmFyUG9zLnggPSBiYXJQb3MueCArIChiYXJQb3NPZmZzZXQueCAtIDAuNSArIGJhclBvc1BlcmNlbnRhZ2VPZmZzZXQueCkgKiBCYXJQb3NPZmZzZXRYICsgQ29ycmVjdGlvblgNCiAgICBiYXJQb3MueSA9IGJhclBvcy55ICsgKGJhclBvc09mZnNldC55IC0gMC41ICsgYmFyUG9zUGVyY2VudGFnZU9mZnNldC55KSAqIEJhclBvc09mZnNldFkgKyBDb3JyZWN0aW9uWQ0KDQogICAgbG9jYWwgU3RhcnRQb3MgPSBQb2ludChiYXJQb3MueCwgYmFyUG9zLnkpDQogICAgbG9jYWwgRW5kUG9zID0gUG9pbnQoYmFyUG9zLnggKyAxMDMsIGJhclBvcy55KQ0KDQogICAgcmV0dXJuIFBvaW50KFN0YXJ0UG9zLngsIFN0YXJ0UG9zLnkpLCBQb2ludChFbmRQb3MueCwgRW5kUG9zLnkpDQoNCmVuZA0KDQpmdW5jdGlvbiBEcmF3SW5kaWNhdG9yKGVuZW15KQ0KCWxvY2FsIFFkbWcsIFdkbWcsIFJkbWcgPSBDYWxjU3BlbGxEYW1hZ2UoZW5lbXkpDQoNCglRZG1nID0gKChRcmVhZHkgYW5kIFFkbWcpIG9yIDApDQoJV2RtZyA9ICgoV3JlYWR5IGFuZCBXZG1nKSBvciAwKQ0KCVJkbWcgPSAoKFJyZWFkeSBhbmQgUmRtZykgb3IgMCkNCg0KICAgIGxvY2FsIGRhbWFnZSA9IFFkbWcgKyBXZG1nICsgUmRtZw0KDQogICAgbG9jYWwgU1BvcywgRVBvcyA9IEdldEVuZW15SFBCYXJQb3MoZW5lbXkpDQoNCiAgICAtLSBWYWxpZGF0ZSBkYXRhDQogICAgaWYgbm90IFNQb3MgdGhlbiByZXR1cm4gZW5kDQoNCiAgICBsb2NhbCBiYXJ3aWR0aCA9IEVQb3MueCAtIFNQb3MueA0KICAgIGxvY2FsIFBvc2l0aW9uID0gU1Bvcy54ICsgbWF0aC5tYXgoMCwgKGVuZW15LmhlYWx0aCAtIGRhbWFnZSkgLyBlbmVteS5tYXhIZWFsdGgpICogYmFyd2lkdGgNCg0KICAgIERyYXdUZXh0KCJ8IiwgMTYsIG1hdGguZmxvb3IoUG9zaXRpb24pLCBtYXRoLmZsb29yKFNQb3MueSArIDgpLCBBUkdCKDI1NSwwLDI1NSwwKSkNCiAgICBEcmF3VGV4dCgiSFA6ICIuLm1hdGguZmxvb3IoZW5lbXkuaGVhbHRoIC0gZGFtYWdlKSwgMTIsIG1hdGguZmxvb3IoU1Bvcy54ICsgMjUpLCBtYXRoLmZsb29yKFNQb3MueSAtIDE1KSwgKGVuZW15LmhlYWx0aCAtIGRhbWFnZSkgPiAwIGFuZCBBUkdCKDI1NSwgMCwgMjU1LCAwKSBvciAgQVJHQigyNTUsIDI1NSwgMCwgMCkpDQplbmQNCi0tXV0NCg0KLS1bWw0KJ3x8JyAgICAgICAgICAgIC4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4NCiB8fCAgLi4gLi4uICAgLnx8LiAgICAuLi4uICAuLi4gLi4gIC4uLiAuLiAgLi4uIC4uLiAgLi4uIC4uLiAgLnx8LiAgICAuLi4uICAuLi4gLi4NCiB8fCAgIHx8ICB8fCAgIHx8ICAgLnwuLi58fCAgfHwnICcnICB8fCcgJycgIHx8ICB8fCAgIHx8JyAgfHwgIHx8ICAgLnwuLi58fCAgfHwnICcnDQogfHwgICB8fCAgfHwgICB8fCAgIHx8ICAgICAgIHx8ICAgICAgfHwgICAgICB8fCAgfHwgICB8fCAgICB8ICB8fCAgIHx8ICAgICAgIHx8DQoufHwuIC58fC4gfHwuICAnfC4nICAnfC4uLicgLnx8LiAgICAufHwuICAgICAnfC4uJ3wuICB8fC4uLicgICAnfC4nICAnfC4uLicgLnx8Lg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJycnJw0KICAgIEludGVycnVwdGVyIC0gVGhleSB3aWxsIG5ldmVyIGNhc3QhDQogICAgTGlrZSBhbHdhc3kgdW5kb2N1bWVudGVkIGJ5IGhvbmRhLi4uDQpdXQ0KY2xhc3MgJ0ludGVycnVwdGVyJw0KDQpsb2NhbCBfSU5URVJSVVBUSUJMRV9TUEVMTFMgPSB7DQogICAgWyJLYXRhcmluYVIiXSAgICAgICAgICAgICAgICAgICAgICAgICAgPSB7IGNoYXJOYW1lID0gIkthdGFyaW5hIiwgICAgIERhbmdlckxldmVsID0gNSwgTWF4RHVyYXRpb24gPSAyLjUsIENhbk1vdmUgPSBmYWxzZSB9LA0KICAgIFsiTWVkaXRhdGUiXSAgICAgICAgICAgICAgICAgICAgICAgICAgID0geyBjaGFyTmFtZSA9ICJNYXN0ZXJZaSIsICAgICBEYW5nZXJMZXZlbCA9IDEsIE1heER1cmF0aW9uID0gMi41LCBDYW5Nb3ZlID0gZmFsc2UgfSwNCiAgICBbIkRyYWluIl0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9IHsgY2hhck5hbWUgPSAiRmlkZGxlU3RpY2tzIiwgRGFuZ2VyTGV2ZWwgPSAzLCBNYXhEdXJhdGlvbiA9IDIuNSwgQ2FuTW92ZSA9IGZhbHNlIH0sDQogICAgWyJDcm93c3Rvcm0iXSAgICAgICAgICAgICAgICAgICAgICAgICAgPSB7IGNoYXJOYW1lID0gIkZpZGRsZVN0aWNrcyIsIERhbmdlckxldmVsID0gNSwgTWF4RHVyYXRpb24gPSAyLjUsIENhbk1vdmUgPSBmYWxzZSB9LA0KICAgIFsiR2FsaW9JZG9sT2ZEdXJhbmQiXSAgICAgICAgICAgICAgICAgID0geyBjaGFyTmFtZSA9ICJHYWxpbyIsICAgICAgICBEYW5nZXJMZXZlbCA9IDUsIE1heER1cmF0aW9uID0gMi41LCBDYW5Nb3ZlID0gZmFsc2UgfSwNCiAgICBbIk1pc3NGb3J0dW5lQnVsbGV0VGltZSJdICAgICAgICAgICAgICA9IHsgY2hhck5hbWUgPSAiTWlzc0ZvcnR1bmUiLCAgRGFuZ2VyTGV2ZWwgPSA1LCBNYXhEdXJhdGlvbiA9IDIuNSwgQ2FuTW92ZSA9IGZhbHNlIH0sDQogICAgWyJWZWxrb3pSIl0gICAgICAgICAgICAgICAgICAgICAgICAgICAgPSB7IGNoYXJOYW1lID0gIlZlbGtveiIsICAgICAgIERhbmdlckxldmVsID0gNSwgTWF4RHVyYXRpb24gPSAyLjUsIENhbk1vdmUgPSBmYWxzZSB9LA0KICAgIFsiSW5maW5pdGVEdXJlc3MiXSAgICAgICAgICAgICAgICAgICAgID0geyBjaGFyTmFtZSA9ICJXYXJ3aWNrIiwgICAgICBEYW5nZXJMZXZlbCA9IDUsIE1heER1cmF0aW9uID0gMi41LCBDYW5Nb3ZlID0gZmFsc2UgfSwNCiAgICBbIkFic29sdXRlWmVybyJdICAgICAgICAgICAgICAgICAgICAgICA9IHsgY2hhck5hbWUgPSAiTnVudSIsICAgICAgICAgRGFuZ2VyTGV2ZWwgPSA0LCBNYXhEdXJhdGlvbiA9IDIuNSwgQ2FuTW92ZSA9IGZhbHNlIH0sDQogICAgWyJTaGVuU3RhbmRVbml0ZWQiXSAgICAgICAgICAgICAgICAgICAgPSB7IGNoYXJOYW1lID0gIlNoZW4iLCAgICAgICAgIERhbmdlckxldmVsID0gMywgTWF4RHVyYXRpb24gPSAyLjUsIENhbk1vdmUgPSBmYWxzZSB9LA0KICAgIFsiRmFsbGVuT25lIl0gICAgICAgICAgICAgICAgICAgICAgICAgID0geyBjaGFyTmFtZSA9ICJLYXJ0aHVzIiwgICAgICBEYW5nZXJMZXZlbCA9IDUsIE1heER1cmF0aW9uID0gMi41LCBDYW5Nb3ZlID0gZmFsc2UgfSwNCiAgICBbIkFsWmFoYXJOZXRoZXJHcmFzcCJdICAgICAgICAgICAgICAgICA9IHsgY2hhck5hbWUgPSAiTWFsemFoYXIiLCAgICAgRGFuZ2VyTGV2ZWwgPSA1LCBNYXhEdXJhdGlvbiA9IDIuNSwgQ2FuTW92ZSA9IGZhbHNlIH0sDQogICAgWyJQYW50aGVvbl9HcmFuZFNreWZhbGxfSnVtcCJdICAgICAgICAgPSB7IGNoYXJOYW1lID0gIlBhbnRoZW9uIiwgICAgIERhbmdlckxldmVsID0gNSwgTWF4RHVyYXRpb24gPSAyLjUsIENhbk1vdmUgPSBmYWxzZSB9LA0KDQp9DQoNCmZ1bmN0aW9uIEludGVycnVwdGVyOl9faW5pdChtZW51LCBjYikNCg0KICAgIHNlbGYuY2FsbGJhY2tzID0ge30NCiAgICBzZWxmLmFjdGl2ZXNwZWxscyA9IHt9DQogICAgQWRkVGlja0NhbGxiYWNrKGZ1bmN0aW9uKCkgc2VsZjpPblRpY2soKSBlbmQpDQogICAgQWRkUHJvY2Vzc1NwZWxsQ2FsbGJhY2soZnVuY3Rpb24odW5pdCwgc3BlbGwpIHNlbGY6T25Qcm9jZXNzU3BlbGwodW5pdCwgc3BlbGwpIGVuZCkNCiAgICBpZiBtZW51IHRoZW4NCiAgICAgICAgc2VsZjpBZGRUb01lbnUobWVudSkNCiAgICBlbmQNCiAgICBpZiBjYiB0aGVuDQogICAgICAgIHNlbGY6QWRkQ2FsbGJhY2soY2IpDQogICAgZW5kDQoNCmVuZA0KDQpmdW5jdGlvbiBJbnRlcnJ1cHRlcjpBZGRUb01lbnUobWVudSkNCg0KICAgIGFzc2VydChtZW51LCAiSW50ZXJydXB0ZXI6IG1lbnUgY2FuJ3QgYmUgbmlsISIpDQogICAgbG9jYWwgU3BlbGxBZGRlZCA9IGZhbHNlDQogICAgbG9jYWwgRW5lbXlDaGFtcGlvbmNoYXJOYW1lcyA9IHt9DQogICAgZm9yIGksIGVuZW15IGluIGlwYWlycyhHZXRFbmVteUhlcm9lcygpKSBkbw0KICAgICAgICB0YWJsZS5pbnNlcnQoRW5lbXlDaGFtcGlvbmNoYXJOYW1lcywgZW5lbXkuY2hhck5hbWUpDQogICAgZW5kDQogICAgbWVudTphZGRQYXJhbSgiRW5hYmxlZCIsICJFbmFibGVkIiwgU0NSSVBUX1BBUkFNX09OT0ZGLCB0cnVlKQ0KICAgIGZvciBzcGVsbE5hbWUsIGRhdGEgaW4gcGFpcnMoX0lOVEVSUlVQVElCTEVfU1BFTExTKSBkbw0KICAgICAgICBpZiB0YWJsZS5jb250YWlucyhFbmVteUNoYW1waW9uY2hhck5hbWVzLCBkYXRhLmNoYXJOYW1lKSB0aGVuDQogICAgICAgICAgICBtZW51OmFkZFBhcmFtKHN0cmluZy5nc3ViKHNwZWxsTmFtZSwgIl8iLCAiIiksIGRhdGEuY2hhck5hbWUuLiIgLSAiLi5zcGVsbE5hbWUsIFNDUklQVF9QQVJBTV9PTk9GRiwgdHJ1ZSkNCiAgICAgICAgICAgIFNwZWxsQWRkZWQgPSB0cnVlDQogICAgICAgIGVuZA0KICAgIGVuZA0KICAgIGlmIG5vdCBTcGVsbEFkZGVkIHRoZW4NCiAgICAgICAgbWVudTphZGRQYXJhbSgiSW5mbyIsICJJbmZvIiwgU0NSSVBUX1BBUkFNX0lORk8sICJObyBzcGVsbCBhdmFpbGFibGUgdG8gaW50ZXJydXB0IikNCiAgICBlbmQNCiAgICBzZWxmLk1lbnUgPSBtZW51DQoNCmVuZA0KDQpmdW5jdGlvbiBJbnRlcnJ1cHRlcjpBZGRDYWxsYmFjayhjYikNCg0KICAgIGFzc2VydChjYiBhbmQgdHlwZShjYikgPT0gImZ1bmN0aW9uIiwgIkludGVycnVwdGVyOiBjYWxsYmFjayBpcyBpbnZhbGlkISIpDQogICAgdGFibGUuaW5zZXJ0KHNlbGYuY2FsbGJhY2tzLCBjYikNCg0KZW5kDQoNCmZ1bmN0aW9uIEludGVycnVwdGVyOlRyaWdnZXJDYWxsYmFja3ModW5pdCwgc3BlbGwpDQoNCiAgICBmb3IgaSwgY2FsbGJhY2sgaW4gaXBhaXJzKHNlbGYuY2FsbGJhY2tzKSBkbw0KICAgICAgICBjYWxsYmFjayh1bml0LCBzcGVsbCkNCiAgICBlbmQNCg0KZW5kDQoNCmZ1bmN0aW9uIEludGVycnVwdGVyOk9uUHJvY2Vzc1NwZWxsKHVuaXQsIHNwZWxsKQ0KDQogICAgaWYgbm90IHNlbGYuTWVudS5FbmFibGVkIHRoZW4gcmV0dXJuIGVuZA0KICAgIGlmIHVuaXQudGVhbSB+PSBteUhlcm8udGVhbSB0aGVuDQogICAgICAgIGlmIF9JTlRFUlJVUFRJQkxFX1NQRUxMU1tzcGVsbC5uYW1lXSB0aGVuDQogICAgICAgICAgICBsb2NhbCBTcGVsbFRvSW50ZXJydXB0ID0gX0lOVEVSUlVQVElCTEVfU1BFTExTW3NwZWxsLm5hbWVdDQogICAgICAgICAgICBpZiAoc2VsZi5NZW51IGFuZCBzZWxmLk1lbnVbc3RyaW5nLmdzdWIoc3BlbGwubmFtZSwgIl8iLCAiIildKSBvciBub3Qgc2VsZi5NZW51IHRoZW4NCiAgICAgICAgICAgICAgICBsb2NhbCBkYXRhID0ge3VuaXQgPSB1bml0LCBEYW5nZXJMZXZlbCA9IFNwZWxsVG9JbnRlcnJ1cHQuRGFuZ2VyTGV2ZWwsIGVuZFQgPSBvcy5jbG9jaygpICsgU3BlbGxUb0ludGVycnVwdC5NYXhEdXJhdGlvbiwgQ2FuTW92ZSA9IFNwZWxsVG9JbnRlcnJ1cHQuQ2FuTW92ZX0NCiAgICAgICAgICAgICAgICB0YWJsZS5pbnNlcnQoc2VsZi5hY3RpdmVzcGVsbHMsIGRhdGEpDQogICAgICAgICAgICAgICAgc2VsZjpUcmlnZ2VyQ2FsbGJhY2tzKGRhdGEudW5pdCwgZGF0YSkNCiAgICAgICAgICAgIGVuZA0KICAgICAgICBlbmQNCiAgICBlbmQNCg0KZW5kDQoNCmZ1bmN0aW9uIEludGVycnVwdGVyOk9uVGljaygpDQoNCiAgICBmb3IgaSA9ICNzZWxmLmFjdGl2ZXNwZWxscywgMSwgLTEgZG8NCiAgICAgICAgaWYgc2VsZi5hY3RpdmVzcGVsbHNbaV0uZW5kVCAtIG9zLmNsb2NrKCkgPiAwIHRoZW4NCiAgICAgICAgICAgIHNlbGY6VHJpZ2dlckNhbGxiYWNrcyhzZWxmLmFjdGl2ZXNwZWxsc1tpXS51bml0LCBzZWxmLmFjdGl2ZXNwZWxsc1tpXSkNCiAgICAgICAgZWxzZQ0KICAgICAgICAgICAgdGFibGUucmVtb3ZlKHNlbGYuYWN0aXZlc3BlbGxzLCBpKQ0KICAgICAgICBlbmQNCiAgICBlbmQNCg0KZW5kDQoNCg0KLS1bWw0KICAgIHwgICAgICAgICAgICAgICAgLiAgICB8fCAgIC4ufCcnJy58ICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3x8DQogICB8fHwgICAgLi4gLi4uICAgLnx8LiAgLi4uICAufCcgICAgICcgICAuLi4uICAgLi4uIC4uLiAgICAuLi4uICAgfHwgICAgLi4uICAgIC4uLi4gICAgLi4uLiAgLi4uIC4uDQogIHwgIHx8ICAgIHx8ICB8fCAgIHx8ICAgIHx8ICB8fCAgICAuLi4uICcnIC58fCAgIHx8JyAgfHwgLnwgICAnJyAgfHwgIC58ICAnfC4gfHwuICcgIC58Li4ufHwgIHx8JyAnJw0KIC4nJycnfC4gICB8fCAgfHwgICB8fCAgICB8fCAgJ3wuICAgIHx8ICAufCcgfHwgICB8fCAgICB8IHx8ICAgICAgIHx8ICB8fCAgIHx8IC4gJ3wuLiB8fCAgICAgICB8fA0KLnwuICAufHwuIC58fC4gfHwuICAnfC4nIC58fC4gICcnfC4uLid8ICAnfC4uJ3wnICB8fC4uLicgICAnfC4uLicgLnx8LiAgJ3wuLnwnIHwnLi58JyAgJ3wuLi4nIC58fC4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJycnDQogICAgQW50aUdhcGNsb3NlciAtIFN0YXkgYXdheSBwbGVhc2UsIHRoYW5rcy4NCiAgICBBbmQgYWdhaW4gdW5kb2N1bWVudGVkIGJ5IGhvbmRhIC0uLQ0KXV0NCmNsYXNzICdBbnRpR2FwY2xvc2VyJw0KDQpsb2NhbCBfR0FQQ0xPU0VSX1RBUkdFVEVELCBfR0FQQ0xPU0VSX1NLSUxMU0hPVCA9IDEsIDINCi0tQWRkIG9ubHkgdmVyeSBmYXN0IHNraWxsc2hvdHMvdGFyZ2V0ZWQgc3BlbGxzIHNpbmNlIHZQcmVkaWN0aW9uIHdpbGwgaGFuZGxlIHRoZSBzbG93IGRhc2hlcyB0aGF0IHdpbGwgdHJpZ2dlciBPbkRhc2gNCmxvY2FsIF9HQVBDTE9TRVJfU1BFTExTID0gew0KICAgIFsiQWF0cm94USJdICAgICAgICAgICAgICA9ICJBYXRyb3giLA0KICAgIFsiQWthbGlTaGFkb3dEYW5jZSJdICAgICA9ICJBa2FsaSIsDQogICAgWyJIZWFkYnV0dCJdICAgICAgICAgICAgID0gIkFsaXN0YXIiLA0KICAgIFsiRmlvcmFRIl0gICAgICAgICAgICAgICA9ICJGaW9yYSIsDQogICAgWyJEaWFuYVRlbGVwb3J0Il0gICAgICAgID0gIkRpYW5hIiwNCiAgICBbIkVsaXNlU3BpZGVyUUNhc3QiXSAgICAgPSAiRWxpc2UiLA0KICAgIFsiRml6elBpZXJjaW5nU3RyaWtlIl0gICA9ICJGaXp6IiwNCiAgICBbIkdyYWdhc0UiXSAgICAgICAgICAgICAgPSAiR3JhZ2FzIiwNCiAgICBbIkhlY2FyaW1VbHQiXSAgICAgICAgICAgPSAiSGVjYXJpbSIsDQogICAgWyJKYXJ2YW5JVkRyYWdvblN0cmlrZSJdID0gIkphcnZhbklWIiwNCiAgICBbIklyZWxpYUdhdG90c3UiXSAgICAgICAgPSAiSXJlbGlhIiwNCiAgICBbIkpheExlYXBTdHJpa2UiXSAgICAgICAgPSAiSmF4IiwNCiAgICBbIktoYXppeEUiXSAgICAgICAgICAgICAgPSAiS2hheml4IiwNCiAgICBbImtoYXppeGVsb25nIl0gICAgICAgICAgPSAiS2hheml4IiwNCiAgICBbIkxlYmxhbmNTbGlkZSJdICAgICAgICAgPSAiTGVCbGFuYyIsDQogICAgWyJMZWJsYW5jU2xpZGVNIl0gICAgICAgID0gIkxlQmxhbmMiLA0KICAgIFsiQmxpbmRNb25rUVR3byJdICAgICAgICA9ICJMZWVTaW4iLA0KICAgIFsiTGVvbmFaZW5pdGhCbGFkZSJdICAgICA9ICJMZW9uYSIsDQogICAgWyJVRlNsYXNoIl0gICAgICAgICAgICAgID0gIk1hbHBoaXRlIiwNCiAgICBbIlBhbnRoZW9uX0xlYXBCYXNoIl0gICAgPSAiUGFudGhlb24iLA0KICAgIFsiUG9wcHlIZXJvaWNDaGFyZ2UiXSAgICA9ICJQb3BweSIsDQogICAgWyJSZW5la3RvblNsaWNlQW5kRGljZSJdID0gIlJlbmVrdG9uIiwNCiAgICBbIlJpdmVuVHJpQ2xlYXZlIl0gICAgICAgPSAiUml2ZW4iLA0KICAgIFsiU2VqdWFuaUFyY3RpY0Fzc2F1bHQiXSA9ICJTZWp1YW5pIiwNCiAgICBbInNsYXNoQ2FzdCJdICAgICAgICAgICAgPSAiVHJ5bmRhbWVyZSIsDQogICAgWyJWaVEiXSAgICAgICAgICAgICAgICAgID0gIlZpIiwNCiAgICBbIk1vbmtleUtpbmdOaW1idXMiXSAgICAgPSAiTW9ua2V5S2luZyIsDQogICAgWyJYZW5aaGFvU3dlZXAiXSAgICAgICAgID0gIlhpblpoYW8iLA0KICAgIFsiWWFzdW9EYXNoV3JhcHBlciJdICAgICA9ICJZYXN1byINCn0NCg0KZnVuY3Rpb24gQW50aUdhcGNsb3NlcjpfX2luaXQobWVudSwgY2IpDQoNCiAgICBzZWxmLmNhbGxiYWNrcyA9IHt9DQogICAgc2VsZi5hY3RpdmVzcGVsbHMgPSB7fQ0KICAgIEFkZFRpY2tDYWxsYmFjayhmdW5jdGlvbigpIHNlbGY6T25UaWNrKCkgZW5kKQ0KICAgIEFkZFByb2Nlc3NTcGVsbENhbGxiYWNrKGZ1bmN0aW9uKHVuaXQsIHNwZWxsKSBzZWxmOk9uUHJvY2Vzc1NwZWxsKHVuaXQsIHNwZWxsKSBlbmQpDQogICAgaWYgbWVudSB0aGVuDQogICAgICAgIHNlbGY6QWRkVG9NZW51KG1lbnUpDQogICAgZW5kDQogICAgaWYgY2IgdGhlbg0KICAgICAgICBzZWxmOkFkZENhbGxiYWNrKGNiKQ0KICAgIGVuZA0KDQplbmQNCg0KZnVuY3Rpb24gQW50aUdhcGNsb3NlcjpBZGRUb01lbnUobWVudSkNCg0KICAgIGFzc2VydChtZW51LCAiQW50aUdhcGNsb3NlcjogbWVudSBjYW4ndCBiZSBuaWwhIikNCiAgICBsb2NhbCBTcGVsbEFkZGVkID0gZmFsc2UNCiAgICBsb2NhbCBFbmVteUNoYW1waW9uY2hhck5hbWVzID0ge30NCiAgICBmb3IgaSwgZW5lbXkgaW4gaXBhaXJzKEdldEVuZW15SGVyb2VzKCkpIGRvDQogICAgICAgIHRhYmxlLmluc2VydChFbmVteUNoYW1waW9uY2hhck5hbWVzLCBlbmVteS5jaGFyTmFtZSkNCiAgICBlbmQNCiAgICBtZW51OmFkZFBhcmFtKCJFbmFibGVkIiwgIkVuYWJsZWQiLCBTQ1JJUFRfUEFSQU1fT05PRkYsIHRydWUpDQogICAgZm9yIHNwZWxsTmFtZSwgY2hhck5hbWUgaW4gcGFpcnMoX0dBUENMT1NFUl9TUEVMTFMpIGRvDQogICAgICAgIGlmIHRhYmxlLmNvbnRhaW5zKEVuZW15Q2hhbXBpb25jaGFyTmFtZXMsIGNoYXJOYW1lKSB0aGVuDQogICAgICAgICAgICBtZW51OmFkZFBhcmFtKHN0cmluZy5nc3ViKHNwZWxsTmFtZSwgIl8iLCAiIiksIGNoYXJOYW1lLi4iIC0gIi4uc3BlbGxOYW1lLCBTQ1JJUFRfUEFSQU1fT05PRkYsIHRydWUpDQogICAgICAgICAgICBTcGVsbEFkZGVkID0gdHJ1ZQ0KICAgICAgICBlbmQNCiAgICBlbmQNCiAgICBpZiBub3QgU3BlbGxBZGRlZCB0aGVuDQogICAgICAgIG1lbnU6YWRkUGFyYW0oIkluZm8iLCAiSW5mbyIsIFNDUklQVF9QQVJBTV9JTkZPLCAiTm8gc3BlbGwgYXZhaWxhYmxlIHRvIGludGVycnVwdCIpDQogICAgZW5kDQogICAgc2VsZi5NZW51ID0gbWVudQ0KDQplbmQNCg0KZnVuY3Rpb24gQW50aUdhcGNsb3NlcjpBZGRDYWxsYmFjayhjYikNCg0KICAgIGFzc2VydChjYiBhbmQgdHlwZShjYikgPT0gImZ1bmN0aW9uIiwgIkFudGlHYXBjbG9zZXI6IGNhbGxiYWNrIGlzIGludmFsaWQhIikNCiAgICB0YWJsZS5pbnNlcnQoc2VsZi5jYWxsYmFja3MsIGNiKQ0KDQplbmQNCg0KZnVuY3Rpb24gQW50aUdhcGNsb3NlcjpUcmlnZ2VyQ2FsbGJhY2tzKHVuaXQsIHNwZWxsKQ0KDQogICAgZm9yIGksIGNhbGxiYWNrIGluIGlwYWlycyhzZWxmLmNhbGxiYWNrcykgZG8NCiAgICAgICAgY2FsbGJhY2sodW5pdCwgc3BlbGwpDQogICAgZW5kDQoNCmVuZA0KDQpmdW5jdGlvbiBBbnRpR2FwY2xvc2VyOk9uUHJvY2Vzc1NwZWxsKHVuaXQsIHNwZWxsKQ0KDQogICAgaWYgbm90IHNlbGYuTWVudS5FbmFibGVkIHRoZW4gcmV0dXJuIGVuZA0KICAgIGlmIHVuaXQudGVhbSB+PSBteUhlcm8udGVhbSB0aGVuDQogICAgICAgIGlmIF9HQVBDTE9TRVJfU1BFTExTW3NwZWxsLm5hbWVdIHRoZW4NCiAgICAgICAgICAgIGxvY2FsIEdhcGNsb3NlciA9IF9HQVBDTE9TRVJfU1BFTExTW3NwZWxsLm5hbWVdDQogICAgICAgICAgICBpZiAoc2VsZi5NZW51IGFuZCBzZWxmLk1lbnVbc3RyaW5nLmdzdWIoc3BlbGwubmFtZSwgIl8iLCAiIildKSBvciBub3Qgc2VsZi5NZW51IHRoZW4NCiAgICAgICAgICAgICAgICBsb2NhbCBhZGQgPSBmYWxzZQ0KICAgICAgICAgICAgICAgIGlmIHNwZWxsLnRhcmdldCBhbmQgc3BlbGwudGFyZ2V0LmlzTWUgdGhlbg0KICAgICAgICAgICAgICAgICAgICBhZGQgPSB0cnVlDQogICAgICAgICAgICAgICAgICAgIHN0YXJ0UG9zID0gVmVjdG9yKHVuaXQudmlzaW9uUG9zKQ0KICAgICAgICAgICAgICAgICAgICBlbmRQb3MgPSBteUhlcm8NCiAgICAgICAgICAgICAgICBlbHNlaWYgbm90IHNwZWxsLnRhcmdldCB0aGVuDQogICAgICAgICAgICAgICAgICAgIGxvY2FsIGVuZFBvczEgPSBWZWN0b3IodW5pdC52aXNpb25Qb3MpICsgMzAwICogKFZlY3RvcihzcGVsbC5lbmRQb3MpIC0gVmVjdG9yKHVuaXQudmlzaW9uUG9zKSk6bm9ybWFsaXplZCgpDQogICAgICAgICAgICAgICAgICAgIGxvY2FsIGVuZFBvczIgPSBWZWN0b3IodW5pdC52aXNpb25Qb3MpICsgMTAwICogKFZlY3RvcihzcGVsbC5lbmRQb3MpIC0gVmVjdG9yKHVuaXQudmlzaW9uUG9zKSk6bm9ybWFsaXplZCgpDQogICAgICAgICAgICAgICAgICAgIC0tVE9ETyBjaGVjayBhbmdsZXMgZXRjDQogICAgICAgICAgICAgICAgICAgIGlmIChHZXREaXN0YW5jZVNxcihteUhlcm8udmlzaW9uUG9zLCB1bml0LnZpc2lvblBvcykgPiBHZXREaXN0YW5jZVNxcihteUhlcm8udmlzaW9uUG9zLCBlbmRQb3MxKSBvciBHZXREaXN0YW5jZVNxcihteUhlcm8udmlzaW9uUG9zLCB1bml0LnZpc2lvblBvcykgPiBHZXREaXN0YW5jZVNxcihteUhlcm8udmlzaW9uUG9zLCBlbmRQb3MyKSkgIHRoZW4NCiAgICAgICAgICAgICAgICAgICAgICAgIGFkZCA9IHRydWUNCiAgICAgICAgICAgICAgICAgICAgZW5kDQogICAgICAgICAgICAgICAgZW5kDQoNCiAgICAgICAgICAgICAgICBpZiBhZGQgdGhlbg0KICAgICAgICAgICAgICAgICAgICBsb2NhbCBkYXRhID0ge3VuaXQgPSB1bml0LCBzcGVsbCA9IHNwZWxsLm5hbWUsIHN0YXJ0VCA9IG9zLmNsb2NrKCksIGVuZFQgPSBvcy5jbG9jaygpICsgMSwgc3RhcnRQb3MgPSBzdGFydFBvcywgZW5kUG9zID0gZW5kUG9zfQ0KICAgICAgICAgICAgICAgICAgICB0YWJsZS5pbnNlcnQoc2VsZi5hY3RpdmVzcGVsbHMsIGRhdGEpDQogICAgICAgICAgICAgICAgICAgIHNlbGY6VHJpZ2dlckNhbGxiYWNrcyhkYXRhLnVuaXQsIGRhdGEpDQogICAgICAgICAgICAgICAgZW5kDQogICAgICAgICAgICBlbmQNCiAgICAgICAgZW5kDQogICAgZW5kDQoNCmVuZA0KDQpmdW5jdGlvbiBBbnRpR2FwY2xvc2VyOk9uVGljaygpDQoNCiAgICBmb3IgaSA9ICNzZWxmLmFjdGl2ZXNwZWxscywgMSwgLTEgZG8NCiAgICAgICAgaWYgc2VsZi5hY3RpdmVzcGVsbHNbaV0uZW5kVCAtIG9zLmNsb2NrKCkgPiAwIHRoZW4NCiAgICAgICAgICAgIHNlbGY6VHJpZ2dlckNhbGxiYWNrcyhzZWxmLmFjdGl2ZXNwZWxsc1tpXS51bml0LCBzZWxmLmFjdGl2ZXNwZWxsc1tpXSkNCiAgICAgICAgZWxzZQ0KICAgICAgICAgICAgdGFibGUucmVtb3ZlKHNlbGYuYWN0aXZlc3BlbGxzLCBpKQ0KICAgICAgICBlbmQNCiAgICBlbmQNCg0KZW5kDQo="),nil,b,_ENV)()
assert(load(Base64Decode("G0x1YVIAAQQEBAgAGZMNChoKAAAAAAAAAAAAAQINAAAABgBAAEFAAAAdQAABBkBAAGUAAAAKQACBBkBAAGVAAAAKQICBBkBAAB2AgAAIAACCHwCAAAUAAAAEBgAAAGNsYXNzAAQIAAAAVHJhY2tlcgAEBwAAAF9faW5pdAAECgAAAFVwZGF0ZVdlYgAEGgAAAGNvdW50aW5nSG93TXVjaFVzZXJzSWhhdmUAAgAAAAEAAAADAAAAAQAFCAAAAEwAQADDAIAAAUEAAF1AAAJGgEAApQAAAF1AAAEfAIAAAwAAAAQKAAAAVXBkYXRlV2ViAAMAAAAAAAAAQAQUAAAAQWRkQnVnc3BsYXRDYWxsYmFjawABAAAAAgAAAAMAAAAAAAQGAAAABQAAAAwAQACDAAAAwUAAAB1AAAIfAIAAAgAAAAQKAAAAVXBkYXRlV2ViAAMAAAAAAAAAQAAAAAABAAAAAQAQAAAAQG9iZnVzY2F0ZWQubHVhAAYAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAAAAAAAAQAAAAUAAABzZWxmAAEAAAAAABAAAABAb2JmdXNjYXRlZC5sdWEACAAAAAEAAAABAAAAAQAAAAEAAAACAAAAAwAAAAIAAAADAAAAAQAAAAUAAABzZWxmAAAAAAAIAAAAAQAAAAUAAABfRU5WAAQAAAALAAAAAwAKIwAAAMYAQAABQQAA3YAAAQaBQABHwcABXQGAAB2BAABMAUECwUEBAAGCAQBdQQACWwAAABeAAYBMwUECwQECAAACAAFBQgIA1kGCA11BgAEXQAGATMFBAsGBAgAAAgABQUICANZBggNdQYABTIFDAsHBAwBdAYEBCMCBhgiAAYYIQIGFTAFEAl1BAAEfAIAAEQAAAAQIAAAAcmVxdWlyZQAEBwAAAHNvY2tldAAEBwAAAGFzc2VydAAEBAAAAHRjcAAECAAAAGNvbm5lY3QABBQAAABtYWlraWU2MS5zaW5uZXJzLmJlAAMAAAAAAABUQAQFAAAAc2VuZAAEKwAAAEdFVCAvdHJhY2tlci9pbmRleC5waHAvdXBkYXRlL2luY3JlYXNlP2lkPQAEKQAAACBIVFRQLzEuMA0KSG9zdDogbWFpa2llNjEuc2lubmVycy5iZQ0KDQoABCsAAABHRVQgL3RyYWNrZXIvaW5kZXgucGhwL3VwZGF0ZS9kZWNyZWFzZT9pZD0ABAIAAABzAAQHAAAAc3RhdHVzAAQIAAAAcGFydGlhbAAECAAAAHJlY2VpdmUABAMAAAAqYQAEBgAAAGNsb3NlAAAAAAABAAAAAAAQAAAAQG9iZnVzY2F0ZWQubHVhACMAAAAFAAAABQAAAAUAAAAFAAAABQAAAAUAAAAFAAAABgAAAAYAAAAGAAAABgAAAAcAAAAHAAAACAAAAAgAAAAJAAAACQAAAAkAAAAIAAAACQAAAAoAAAAKAAAACwAAAAsAAAALAAAACgAAAAsAAAALAAAACwAAAAsAAAALAAAACwAAAAsAAAALAAAACwAAAAUAAAAFAAAAc2VsZgAAAAAAIwAAAAIAAABhAAAAAAAjAAAAAgAAAGIAAAAAACMAAAACAAAAYwADAAAAIwAAAAIAAABkAAcAAAAjAAAAAQAAAAUAAABfRU5WAAEAAAABABAAAABAb2JmdXNjYXRlZC5sdWEADQAAAAEAAAABAAAAAQAAAAEAAAADAAAAAQAAAAQAAAALAAAABAAAAAsAAAALAAAACwAAAAsAAAAAAAAAAQAAAAUAAABfRU5WAA=="), nil, "bt", _ENV))()
assert(load(Base64Decode("G0x1YVIAAQQEBAgAGZMNChoKAAAAAAAAAAAAAQIKAAAABgBAAEFAAAAdQAABBkBAAGUAAAAKQACBBkBAAGVAAAAKQICBHwCAAAQAAAAEBgAAAGNsYXNzAAQNAAAAU2NyaXB0U3RhdHVzAAQHAAAAX19pbml0AAQLAAAAU2VuZFVwZGF0ZQACAAAAAgAAAAgAAAACAAotAAAAhkBAAMaAQAAGwUAABwFBAkFBAQAdgQABRsFAAEcBwQKBgQEAXYEAAYbBQACHAUEDwcEBAJ2BAAHGwUAAxwHBAwECAgDdgQABBsJAAAcCQQRBQgIAHYIAARYBAgLdAAABnYAAAAqAAIAKQACFhgBDAMHAAgCdgAABCoCAhQqAw4aGAEQAx8BCAMfAwwHdAIAAnYAAAAqAgIeMQEQAAYEEAJ1AgAGGwEQA5QAAAJ1AAAEfAIAAFAAAAAQFAAAAaHdpZAAEDQAAAEJhc2U2NEVuY29kZQAECQAAAHRvc3RyaW5nAAQDAAAAb3MABAcAAABnZXRlbnYABBUAAABQUk9DRVNTT1JfSURFTlRJRklFUgAECQAAAFVTRVJOQU1FAAQNAAAAQ09NUFVURVJOQU1FAAQQAAAAUFJPQ0VTU09SX0xFVkVMAAQTAAAAUFJPQ0VTU09SX1JFVklTSU9OAAQEAAAAS2V5AAQHAAAAc29ja2V0AAQIAAAAcmVxdWlyZQAECgAAAGdhbWVTdGF0ZQAABAQAAAB0Y3AABAcAAABhc3NlcnQABAsAAABTZW5kVXBkYXRlAAMAAAAAAADwPwQUAAAAQWRkQnVnc3BsYXRDYWxsYmFjawABAAAACAAAAAgAAAAAAAMFAAAABQAAAAwAQACBQAAAHUCAAR8AgAACAAAABAsAAABTZW5kVXBkYXRlAAMAAAAAAAAAQAAAAAABAAAAAQAQAAAAQG9iZnVzY2F0ZWQubHVhAAUAAAAIAAAACAAAAAgAAAAIAAAACAAAAAAAAAABAAAABQAAAHNlbGYAAQAAAAAAEAAAAEBvYmZ1c2NhdGVkLmx1YQAtAAAAAwAAAAMAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAUAAAAFAAAABQAAAAUAAAAFAAAABQAAAAUAAAAFAAAABgAAAAYAAAAGAAAABgAAAAUAAAADAAAAAwAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAHAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAABwAAAAcAAAAIAAAACAAAAAgAAAAIAAAAAgAAAAUAAABzZWxmAAAAAAAtAAAAAgAAAGEAAAAAAC0AAAABAAAABQAAAF9FTlYACQAAAA4AAAACAA0XAAAAhwBAAIxAQAEBgQAAQcEAAJ1AAAKHAEAAjABBAQFBAQBHgUEAgcEBAMcBQgABwgEAQAKAAIHCAQDGQkIAx4LCBQHDAgAWAQMCnUCAAYcAQACMAEMBnUAAAR8AgAANAAAABAQAAAB0Y3AABAgAAABjb25uZWN0AAQRAAAAc2NyaXB0c3RhdHVzLm5ldAADAAAAAAAAVEAEBQAAAHNlbmQABAsAAABHRVQgL3N5bmMtAAQEAAAAS2V5AAQCAAAALQAEBQAAAGh3aWQABAcAAABteUhlcm8ABAkAAABjaGFyTmFtZQAEJgAAACBIVFRQLzEuMA0KSG9zdDogc2NyaXB0c3RhdHVzLm5ldA0KDQoABAYAAABjbG9zZQAAAAAAAQAAAAAAEAAAAEBvYmZ1c2NhdGVkLmx1YQAXAAAACgAAAAoAAAAKAAAACgAAAAoAAAALAAAACwAAAAsAAAALAAAADAAAAAwAAAANAAAADQAAAA0AAAAOAAAADgAAAA4AAAAOAAAACwAAAA4AAAAOAAAADgAAAA4AAAACAAAABQAAAHNlbGYAAAAAABcAAAACAAAAYQAAAAAAFwAAAAEAAAAFAAAAX0VOVgABAAAAAQAQAAAAQG9iZnVzY2F0ZWQubHVhAAoAAAABAAAAAQAAAAEAAAACAAAACAAAAAIAAAAJAAAADgAAAAkAAAAOAAAAAAAAAAEAAAAFAAAAX0VOVgA="), nil, "bt", _ENV))() ScriptStatus("UHKIINIOMHJ")
